(* Content-type: application/vnd.wolfram.mathematica *)

(*** Wolfram Notebook File ***)
(* http://www.wolfram.com/nb *)

(* CreatedBy='Mathematica 10.1' *)

(*CacheID: 234*)
(* Internal cache information:
NotebookFileLineBreakTest
NotebookFileLineBreakTest
NotebookDataPosition[       158,          7]
NotebookDataLength[     82376,       1885]
NotebookOptionsPosition[     80445,       1832]
NotebookOutlinePosition[     82466,       1887]
CellTagsIndexPosition[     82423,       1884]
WindowTitle->Save to Wolfram Cloud
WindowFrame->ModalDialog*)

(* Beginning of Notebook Content *)
Notebook[{
Cell[BoxData[
 DynamicModuleBox[{$CellContext`directoryitem$$, $CellContext`savefilename$$ =
   "", $CellContext`selecteditems$$ = {}, $CellContext`loaded$$, \
$CellContext`maincolumnready$$, $CellContext`baseurl$$, \
$CellContext`location$$, $CellContext`history$$}, 
  DynamicBox[
   ToBoxes[$CellContext`getBaseURL[]; $CellContext`CloudObjectToFSItem[]; \
$CellContext`directoryitem$$; If[
      TrueQ[$CellContext`maincolumnready$$], 
      $CellContext`MainColumn["Save", 
       TrueQ[$CellContext`loaded$$], $CellContext`location$$, 
       If[
        TrueQ[$CellContext`loaded$$], 
        $CellContext`FSItemChildren[$CellContext`directoryitem$$], {}], 
       Dynamic[$CellContext`directoryitem$$], 
       Dynamic[$CellContext`selecteditems$$], 
       Dynamic[$CellContext`savefilename$$]], 
      Pane[
       Column[{
         Animator[Appearance -> "Necklace"], 
         Dynamic[
          FEPrivate`FrontEndResource["CloudDialogs", "Initializing"]]}, 
        Center, BaseStyle -> {"DialogStyle", FontColor -> GrayLevel[0.85]}, 
        Spacings -> 3], ImageSize -> {
         Scaled[1], 200}, Alignment -> {Center, Center}]], StandardForm],
   TrackedSymbols:>{$CellContext`directoryitem$$, $CellContext`loaded$$, \
$CellContext`maincolumnready$$}],
  Deinitialization:>(
   If["Save" === "Open", 
     CurrentValue[$FrontEnd, {
        "WolframCloudSettings", "OpenDialogWindowSize"}] = CurrentValue[
        EvaluationNotebook[], WindowSize]; 
     CurrentValue[$FrontEnd, {
        "WolframCloudSettings", "OpenDialogWindowMargins"}] = CurrentValue[
        EvaluationNotebook[], WindowMargins]]; 
   If["Save" === "Save", 
     CurrentValue[$FrontEnd, {
        "WolframCloudSettings", "SaveDialogWindowSize"}] = CurrentValue[
        EvaluationNotebook[], WindowSize]; 
     CurrentValue[$FrontEnd, {
        "WolframCloudSettings", "SaveDialogWindowMargins"}] = CurrentValue[
        EvaluationNotebook[], WindowMargins]]; Null),
  DynamicModuleValues:>{},
  Initialization:>({$CellContext`getBaseURL[] := 
     Module[{$CellContext`setting}, $CellContext`setting = 
        CurrentValue[$FrontEnd, {
          "PrivateFrontEndOptions", "InterfaceSettings", 
           "WolframCloudExplorer", "BaseURL"}, $CloudBase]; If[
         Not[
          StringQ[$CellContext`setting]], 
         Return[$CloudBase]]; Switch[
         ToLowerCase[$CellContext`setting], "automatic", $CloudBase, 
         "production", "https://www.wolframcloud.com/", "devel", 
         "https://www.devel.wolframcloud.com/", "test", 
         "https://www.test.wolframcloud.com/", "local", $UserBaseDirectory, 
         Blank[
         String], $CellContext`setting]], $CellContext`CloudObjectToFSItem[
       Pattern[$CellContext`obj, 
        Blank[CloudObject]]] := 
     Module[{$CellContext`info}, $CellContext`info = \
$CellContext`cachedCloudObjectInformation[$CellContext`obj]; 
       If[$CellContext`info === $Failed, 
         $CellContext`FSItem["Cloud", $CellContext`obj, None, 
          CloudObjectInformationData[
           Association[{"FileType" -> None}]]], 
         $CellContext`FSItem["Cloud", $CellContext`obj, 
          
          Part[$CellContext`info, 1, 
           "FileType"], $CellContext`info]]], $CellContext`CloudObjectToFSItem[
       Pattern[$CellContext`obj, $Failed]] := $CellContext`FSItem[
      "Cloud", $CellContext`obj, None, 
       CloudObjectInformationData[
        Association[{
         "FileType" -> None}]]], $CellContext`cachedCloudObjectInformation[
       Pattern[$CellContext`cloudobj, 
        Blank[CloudObject]]] := 
     Module[{$CellContext`info}, $CellContext`setStatus[
         $CellContext`textResourceString[
         "statusDirectoryInfo"]]; $CellContext`info = \
$CellContext`getCloudObjectInformation[$CellContext`cloudobj]; If[
         MatchQ[$CellContext`info, 
          Blank[
          CloudObjectInformationData]], \
$CellContext`cachedCloudObjectInformation[$CellContext`cloudobj] = \
$CellContext`info, $Failed]], $CellContext`cachedCloudObjectInformation[
       Pattern[$CellContext`cloudobjs, 
        Blank[List]]] := 
     Module[{$CellContext`cache, $CellContext`cached, $CellContext`uncached, \
$CellContext`cloudobj, $CellContext`i = 
        0, $CellContext`n, $CellContext`info, $CellContext`infoassoc}, \
$CellContext`cache = Cases[
          Map[First, 
           DownValues[$CellContext`cachedCloudObjectInformation]], 
          Blank[CloudObject], Infinity]; $CellContext`uncached = 
        DeleteCases[$CellContext`cloudobjs, 
          Apply[Alternatives, $CellContext`cache]]; $CellContext`n = 
        Length[$CellContext`uncached]; 
       If[CloudObjectInformation[{}] === {}, $CellContext`setStatus[
           $CellContext`textResourceString[
           "statusContent"]]; $CellContext`infoassoc = Association[
            $CellContext`getCloudObjectInformation[$CellContext`uncached]], \
$CellContext`infoassoc = Association[{}]]; Table[
         If[
          
          MemberQ[$CellContext`uncached, $CellContext`cloudobj], \
$CellContext`info = $CellContext`infoassoc[$CellContext`cloudobj]; If[
            Not[
             MatchQ[$CellContext`info, 
              Blank[CloudObjectInformationData]]], $CellContext`setStatus[
              StringJoin[
               $CellContext`textResourceString["statusContentPrefix"], 
               ToString[
                Round[
                100 ((PreIncrement[$CellContext`i] - 1)/$CellContext`n)]], 
               "%"]]; $CellContext`info = \
$CellContext`getCloudObjectInformation[$CellContext`cloudobj]]; If[
            MatchQ[$CellContext`info, 
             Blank[
             CloudObjectInformationData]], \
$CellContext`cachedCloudObjectInformation[$CellContext`cloudobj] = \
$CellContext`info, $Failed], 
          $CellContext`cachedCloudObjectInformation[$CellContext`cloudobj]], \
{$CellContext`cloudobj, $CellContext`cloudobjs}]], \
$CellContext`textResourceString[
       Pattern[$CellContext`id, 
        Blank[String]]] := 
     FrontEndResource[
      "CloudDialogs", $CellContext`id], $CellContext`getCloudObjectInformation[
       Pattern[$CellContext`cloudobj, 
        Blank[CloudObject]]] := $CellContext`processCloudObjectInformationData[
       CloudObjectInformation[$CellContext`cloudobj]], \
$CellContext`getCloudObjectInformation[
       Pattern[$CellContext`cloudobjs, {
         BlankNullSequence[CloudObject]}]] := 
     Module[{$CellContext`infolist}, $CellContext`infolist = 
        CloudObjectInformation[$CellContext`cloudobjs]; 
       If[Length[$CellContext`cloudobjs] === Length[$CellContext`infolist], 
         MapThread[# -> $CellContext`processCloudObjectInformationData[#2]& , \
{$CellContext`cloudobjs, $CellContext`infolist}], {}]], \
$CellContext`processCloudObjectInformationData[
       CloudObjectInformationData[
        Pattern[$CellContext`orig, 
         Blank[Association]]]] := 
     Module[{$CellContext`name, $CellContext`new = $CellContext`orig}, \
$CellContext`name = $CellContext`orig["DisplayName"]; If[
         StringQ[$CellContext`name], $CellContext`new[
          "Name"] = $CellContext`name]; 
       CloudObjectInformationData[$CellContext`new]], \
$CellContext`processCloudObjectInformationData[
       Pattern[$CellContext`other, 
        Blank[]]] := $CellContext`other, $CellContext`MainColumn["Explore", 
       Pattern[$CellContext`loaded, 
        Blank[]], 
       Pattern[$CellContext`location, 
        Blank[]], 
       Pattern[$CellContext`items, {
         BlankNullSequence[$CellContext`FSItem]}], 
       Dynamic[
        Pattern[$CellContext`directoryitem, 
         Blank[]]], 
       Dynamic[
        Pattern[$CellContext`selecteditems, 
         Blank[]]], 
       Dynamic[
        Pattern[$CellContext`savefilename, 
         Blank[]]]] := Column[
       Flatten[{
         $CellContext`ItemListing[
         "Explore", $CellContext`loaded, $CellContext`items, 
          Dynamic[$CellContext`directoryitem], 
          Dynamic[$CellContext`selecteditems], 
          Dynamic[$CellContext`savefilename]]}], Spacings -> 
       0], $CellContext`MainColumn["Open", 
       Pattern[$CellContext`loaded, 
        Blank[]], 
       Pattern[$CellContext`location, 
        Blank[]], 
       Pattern[$CellContext`items, {
         BlankNullSequence[$CellContext`FSItem]}], 
       Dynamic[
        Pattern[$CellContext`directoryitem, 
         Blank[]]], 
       Dynamic[
        Pattern[$CellContext`selecteditems, 
         Blank[]]], 
       Dynamic[
        Pattern[$CellContext`savefilename, 
         Blank[]]]] := With[{$CellContext`enabled = TrueQ[
          And[$CellContext`loaded, 
           CurrentValue["AllowDownloads"], 
           CurrentValue["InternetConnectionAvailable"], 
           CurrentValue["WolframCloudConnected"], 
           $CellContext`FSItemQ[$CellContext`directoryitem], 
           $CellContext`FSItemDirectoryQ[$CellContext`directoryitem]]]}, 
       Column[
        Flatten[{
          $CellContext`ItemListing[
          "Open", $CellContext`loaded, $CellContext`items, 
           Dynamic[$CellContext`directoryitem], 
           Dynamic[$CellContext`selecteditems], 
           Dynamic[$CellContext`savefilename]], 
          Panel[
           Grid[{{
              $CellContext`CancelSelectedItemsButton[], 
              $CellContext`OpenSelectedItemsButton[
               Dynamic[$CellContext`directoryitem], 
               
               Dynamic[$CellContext`selecteditems], $CellContext`enabled]}}], \
$CellContext`footerStripeAppearance, FrameMargins -> {{15, 15}, {0, 0}}, 
           ImageSize -> {
             Scaled[1], 50}, Alignment -> {Right, Center}]}], Spacings -> 
        0]], $CellContext`MainColumn["Save", 
       Pattern[$CellContext`loaded, 
        Blank[]], 
       Pattern[$CellContext`location, 
        Blank[]], 
       Pattern[$CellContext`items, {
         BlankNullSequence[$CellContext`FSItem]}], 
       Dynamic[
        Pattern[$CellContext`directoryitem, 
         Blank[]]], 
       Dynamic[
        Pattern[$CellContext`selecteditems, 
         Blank[]]], 
       Dynamic[
        Pattern[$CellContext`savefilename, 
         Blank[]]]] := With[{$CellContext`enabled = TrueQ[
          And[$CellContext`loaded, 
           CurrentValue["AllowDownloads"], 
           CurrentValue["InternetConnectionAvailable"], 
           CurrentValue["WolframCloudConnected"], 
           $CellContext`FSItemQ[$CellContext`directoryitem], 
           $CellContext`FSItemDirectoryQ[$CellContext`directoryitem]]]}, 
       Column[
        Flatten[{
          $CellContext`ItemListing[
          "Save", $CellContext`loaded, $CellContext`items, 
           Dynamic[$CellContext`directoryitem], 
           Dynamic[$CellContext`selecteditems], 
           Dynamic[$CellContext`savefilename]], 
          Panel[
           Column[{
             $CellContext`SaveAsInputField[
              Dynamic[$CellContext`savefilename], $CellContext`enabled], 
             Grid[{{
                $CellContext`NewDirectoryButton[
                 Dynamic[$CellContext`directoryitem], $CellContext`enabled], 
                Item["", ItemSize -> Fit], 
                $CellContext`CancelSaveAsButton[], 
                $CellContext`SaveAsButton[
                 Dynamic[$CellContext`savefilename], 
                 
                 Dynamic[$CellContext`directoryitem], \
$CellContext`enabled]}}]}, Spacings -> 
            2], $CellContext`footerStripeAppearance, 
           FrameMargins -> {{15, 15}, {0, 0}}, ImageSize -> {
             Scaled[1], 100}, Alignment -> {Right, Center}]}], Spacings -> 
        0]], $CellContext`MainColumn[
       Pattern[$CellContext`args, 
        BlankNullSequence[]]] := Column[
       Map[FullForm, 
        Flatten[{
         "Unknown state", $CellContext`args}]]], $CellContext`ItemListing[
       Pattern[$CellContext`dialogType, 
        Blank[]], 
       Pattern[$CellContext`loaded, 
        Except[True]], 
       Pattern[$CellContext`items, {
         BlankNullSequence[$CellContext`FSItem]}], 
       Dynamic[
        Pattern[$CellContext`directoryitem, 
         Blank[]]], 
       Dynamic[
        Pattern[$CellContext`selecteditems, 
         Blank[]]], 
       Dynamic[
        Pattern[$CellContext`savefilename, 
         Blank[]]]] := {
       $CellContext`CloudFilesStripe[
        Dynamic[$CellContext`directoryitem], False], 
       $CellContext`CurrentDirectoryStripe[$CellContext`directoryitem, 
        Dynamic[$CellContext`directoryitem], $CellContext`dialogType === 
        "Explore"], 
       Pane[
        DynamicModule[{}, 
         Column[{
           $CellContext`CustomAnimator["ProgressSpinner"], 
           $CellContext`textResource["Loading"]}, Alignment -> Center, 
          BaseStyle -> $CellContext`$defaultStyle, ItemSize -> Fit, Spacings -> 
          2], Initialization :> 
         If[$CellContext`loaded === "NeedToInitializeConnection", 
           $CellContext`InitializeConnection[]], SynchronousInitialization -> 
         False], ImageSize -> If[$CellContext`dialogType === "Open", 
          Dynamic[AbsoluteCurrentValue[
             FrontEnd`EvaluationNotebook[], WindowSize] - {
           0, 40 + 40 + 50 + 
            FEPrivate`Switch[
             FEPrivate`$OperatingSystem, "MacOSX", 15, "Windows", 15, 
              Blank[], 30] + 3}], 
          Dynamic[AbsoluteCurrentValue[
             FrontEnd`EvaluationNotebook[], WindowSize] - {
           0, 40 + 40 + 50 + 50 + 
            FEPrivate`Switch[
             FEPrivate`$OperatingSystem, "MacOSX", 15, "Windows", 15, 
              Blank[], 30] + 3}]], Alignment -> {Center, 0.25}, 
        AppearanceElements -> {}, Scrollbars -> 
        False]}, $CellContext`ItemListing[
       Pattern[$CellContext`dialogType, 
        Blank[]], 
       Pattern[$CellContext`loaded, True], 
       Pattern[$CellContext`items, {
         BlankNullSequence[$CellContext`FSItem]}], 
       Dynamic[
        Pattern[$CellContext`directoryitem, 
         Blank[]]], 
       Dynamic[
        Pattern[$CellContext`selecteditems, 
         Blank[]]], 
       Dynamic[
        Pattern[$CellContext`savefilename, 
         Blank[]]]] := Condition[{
        $CellContext`CloudFilesStripe[
         Dynamic[$CellContext`directoryitem], False], 
        $CellContext`CurrentDirectoryStripe[$CellContext`directoryitem, 
         Dynamic[$CellContext`directoryitem], $CellContext`dialogType === 
         "Explore"], 
        Pane[
         Column[
          Flatten[{"", 
            $CellContext`imageResource["ErrorIconLarge.png"], 
            If[
             Not[
              TrueQ[
               CurrentValue["AllowDownloads"]]], 
             $CellContext`textResource["InternetBlocked"], {}], 
            If[
             Not[
              TrueQ[
               CurrentValue["InternetConnectionAvailable"]]], 
             $CellContext`textResource["InternetOff"], {}], 
            If[
             Not[
              TrueQ[
               CurrentValue["WolframCloudConnected"]]], 
             $CellContext`textResource["NotConnected"], {}], 
            If[
             And[
              TrueQ[
               CurrentValue["WolframCloudConnected"]], 
              $CellContext`FSItemQ[$CellContext`directoryitem], 
              Not[
               $CellContext`FSItemDirectoryQ[$CellContext`directoryitem]]], 
             $CellContext`textResource["NotDirectory"], {}], 
            If[
             And[
              TrueQ[
               CurrentValue["AllowDownloads"]], 
              TrueQ[
               CurrentValue["InternetConnectionAvailable"]], 
              Or[
               Not[
                TrueQ[
                 CurrentValue["WolframCloudConnected"]]], 
               And[
                $CellContext`FSItemQ[$CellContext`directoryitem], 
                Not[
                 $CellContext`FSItemDirectoryQ[$CellContext`directoryitem]]]]]\
, 
             Button[
              $CellContext`textResource["TryAgain"], 
              $CellContext`InitializeConnection[], \
$CellContext`defaultButtonAppearance, 
              BaseStyle -> $CellContext`$defaultHeavyStyle, 
              FrameMargins -> {{20, 20}, {0, 0}}, ImageSize -> Automatic, 
              Method -> "Queued"], {}]}], Alignment -> Center, 
          BaseStyle -> $CellContext`$defaultHeavyStyle, ItemSize -> Fit, 
          Spacings -> 3], ImageSize -> 
         If[$CellContext`dialogType === "Open", 
           Dynamic[AbsoluteCurrentValue[
              FrontEnd`EvaluationNotebook[], WindowSize] - {
            0, 40 + 40 + 50 + 
             FEPrivate`Switch[
              FEPrivate`$OperatingSystem, "MacOSX", 15, "Windows", 15, 
               Blank[], 30] + 3}], 
           Dynamic[AbsoluteCurrentValue[
              FrontEnd`EvaluationNotebook[], WindowSize] - {
            0, 40 + 40 + 50 + 50 + 
             FEPrivate`Switch[
              FEPrivate`$OperatingSystem, "MacOSX", 15, "Windows", 15, 
               Blank[], 30] + 3}]], Alignment -> {Center, Top}, 
         AppearanceElements -> {}, Scrollbars -> False]}, 
       Or[
        Not[
         TrueQ[
          CurrentValue["AllowDownloads"]]], 
        Not[
         TrueQ[
          CurrentValue["InternetConnectionAvailable"]]], 
        Not[
         TrueQ[
          CurrentValue["WolframCloudConnected"]]], 
        And[
         $CellContext`FSItemQ[$CellContext`directoryitem], 
         Not[
          $CellContext`FSItemDirectoryQ[$CellContext`directoryitem]]]]], \
$CellContext`ItemListing[
       Pattern[$CellContext`dialogType, 
        Blank[]], 
       Pattern[$CellContext`loaded, True], 
       Pattern[$CellContext`items, {
         BlankNullSequence[$CellContext`FSItem]}], 
       Dynamic[
        Pattern[$CellContext`directoryitem, 
         Blank[]]], 
       Dynamic[
        Pattern[$CellContext`selecteditems, 
         Blank[]]], 
       Dynamic[
        Pattern[$CellContext`savefilename, 
         Blank[]]]] := Condition[
       $CellContext`ItemListing[$CellContext`dialogType, 
        "NeedToInitializeConnection", $CellContext`items, 
        Dynamic[$CellContext`directoryitem], 
        Dynamic[$CellContext`selecteditems], 
        Dynamic[$CellContext`savefilename]], 
       Not[
        $CellContext`FSItemQ[$CellContext`directoryitem]]], \
$CellContext`ItemListing[
       Pattern[$CellContext`dialogType, 
        Blank[]], 
       Pattern[$CellContext`loaded, True], 
       Pattern[$CellContext`items, {
         BlankNullSequence[$CellContext`FSItem]}], 
       Dynamic[
        Pattern[$CellContext`directoryitem, 
         Blank[]]], 
       Dynamic[
        Pattern[$CellContext`selecteditems, 
         Blank[]]], 
       Dynamic[
        Pattern[$CellContext`savefilename, 
         Blank[]]]] := {
       $CellContext`CloudFilesStripe[
        Dynamic[$CellContext`directoryitem], True], 
       $CellContext`CurrentDirectoryStripe[$CellContext`directoryitem, 
        Dynamic[$CellContext`directoryitem], $CellContext`dialogType === 
        "Explore"], 
       If[$CellContext`dialogType === "Explore", 
        Map[$CellContext`ItemRow[#, 
          Dynamic[$CellContext`directoryitem]]& , $CellContext`items], 
        DynamicModule[{}, 
         Pane[
          Column[
           If[$CellContext`items === {}, {
             $CellContext`NoItemsRow[]}, 
            Map[$CellContext`ItemRow[#, 
              Dynamic[$CellContext`directoryitem], 
              Dynamic[$CellContext`selecteditems], 
              
              Dynamic[$CellContext`savefilename], $CellContext`dialogType]& , \
$CellContext`items]], Spacings -> 0.1], ImageSize -> 
          If[$CellContext`dialogType === "Open", 
            Dynamic[AbsoluteCurrentValue[
               FrontEnd`EvaluationNotebook[], WindowSize] - {
             0, 40 + 40 + 50 + 
              FEPrivate`Switch[
               FEPrivate`$OperatingSystem, "MacOSX", 15, "Windows", 15, 
                Blank[], 30] + 3}], 
            Dynamic[AbsoluteCurrentValue[
               FrontEnd`EvaluationNotebook[], WindowSize] - {
             0, 40 + 40 + 50 + 50 + 
              FEPrivate`Switch[
               FEPrivate`$OperatingSystem, "MacOSX", 15, "Windows", 15, 
                Blank[], 30] + 3}]], Scrollbars -> {False, Automatic}, 
          AppearanceElements -> {}], Initialization :> 
         If[$CellContext`dialogType === "Save", 
           FrontEnd`MoveCursorToInputField[
            EvaluationNotebook[], "CloudSaveAsInputField"]], 
         SynchronousInitialization -> False]]}, $CellContext`CloudFilesStripe[
      
       Dynamic[
        Pattern[$CellContext`directoryitem, 
         Blank[]]], 
       Pattern[$CellContext`showRefreshButton, 
        Blank[]]] := DynamicModule[{$CellContext`busy = False}, 
       Panel[
        Grid[{{
           Item[
            $CellContext`textResource["CloudFiles"], Alignment -> Left], 
           Item[
            (If[
             TrueQ[$CellContext`showRefreshButton], #, ""]& )[
             Button[
              PaneSelector[{False -> Tooltip[
                  $CellContext`imageResource["RefreshIcon.png"], 
                  $CellContext`textResource["Refresh"]], True -> 
                Animator[Appearance -> "Necklace", ImageSize -> 20]}, 
               Dynamic[
                TrueQ[$CellContext`busy]], ImageSize -> 
               Automatic], $CellContext`busy = True; If[
                $CellContext`FSItemQ[$CellContext`directoryitem], Quiet[
                  Unset[
                   $CellContext`cachedCloudObjects[
                    $CellContext`FSItemPath[$CellContext`directoryitem]]]]; 
                Map[Quiet[
                   Unset[
                    $CellContext`cachedCloudObjectInformation[
                    $CellContext`FSItemPath[#]]]]& , 
                  $CellContext`FSItemChildren[$CellContext`directoryitem]]; \
$CellContext`DoRefreshDirectory[
                  Dynamic[$CellContext`directoryitem]], 
                $CellContext`InitializeConnection[]]; $CellContext`busy = 
               False, Appearance -> None, 
              BaseStyle -> $CellContext`$defaultStyle, Method -> "Queued"]], 
            Alignment -> Right]}}, 
         ItemSize -> {
          Fit, Automatic}], $CellContext`cloudFilesStripeAppearance, 
        Alignment -> {Left, Center}, 
        BaseStyle -> $CellContext`$defaultHeavyStyle, 
        FrameMargins -> {{15, 15}, {0, 0}}, ImageSize -> 
        Dynamic[{AbsoluteCurrentValue[
             FrontEnd`EvaluationNotebook[], {WindowSize, 1}] + 0, 
           40}]]], $CellContext`textResource[
       Pattern[$CellContext`id, 
        Blank[String]]] := Dynamic[
       FEPrivate`FrontEndResource[
       "CloudDialogs", $CellContext`id]], $CellContext`imageResource[
       Pattern[$CellContext`id, 
        Blank[String]]] := Dynamic[
       RawBoxes[
        FEPrivate`ImportImage[
         FrontEnd`ToFileName[{"Dialogs", "CloudDialogs"}, $CellContext`id]]], 
       BaseStyle -> {CacheGraphics -> False}], $CellContext`FSItemQ[
       Pattern[$CellContext`item, 
        Blank[]]] := 
     Head[$CellContext`item] === $CellContext`FSItem, \
$CellContext`cachedCloudObjects[
       Pattern[$CellContext`cloudobj, 
        Blank[CloudObject]]] := 
     Module[{$CellContext`objs}, $CellContext`setStatus[
         $CellContext`textResourceString[
         "statusDirectoryInfo"]]; $CellContext`objs = 
        Symbol["System`CloudObjects"][$CellContext`cloudobj]; If[
         ListQ[$CellContext`objs], \
$CellContext`cachedCloudObjects[$CellContext`cloudobj] = $CellContext`objs, \
$CellContext`objs = $Failed]], $CellContext`FSItemPath[
       Pattern[$CellContext`item, 
        $CellContext`FSItem[
         Blank[], 
         Pattern[$CellContext`path, 
          Blank[]], 
         BlankNullSequence[]]]] := $CellContext`path, \
$CellContext`FSItemChildren[
       Pattern[$CellContext`item, 
        $CellContext`FSItem[
         Blank[], 
         Blank[], 
         Blank[], 
         Blank[], 
         Pattern[$CellContext`children, 
          Blank[]], 
         BlankNullSequence[]]]] := $CellContext`children, \
$CellContext`FSItemChildren[
       Pattern[$CellContext`item, 
        Blank[$CellContext`FSItem]]] := None, $CellContext`FSItemChildren[
       Pattern[$CellContext`other, 
        Blank[]]] := {}, $CellContext`DoRefreshDirectory[
       Dynamic[
        Pattern[$CellContext`directoryitem, 
         Blank[]]]] := ($CellContext`showLoadingPage[True]; Quiet[
        Unset[
         $CellContext`cachedCloudObjects[
          $CellContext`FSItemPath[$CellContext`directoryitem]]]]; \
$CellContext`DoSetDirectory[
        $CellContext`FSForgetItemChildren[$CellContext`directoryitem], 
        Dynamic[$CellContext`directoryitem]]; \
$CellContext`updateHistory[$CellContext`directoryitem]; \
$CellContext`showLoadingPage[False]; Null), $CellContext`DoSetDirectory[
       Pattern[$CellContext`item, 
        Blank[$CellContext`FSItem]], 
       Dynamic[
        Pattern[$CellContext`directoryitem, 
         Blank[]]]] := 
     If[$CellContext`FSItemChildren[$CellContext`item] === 
       None, $CellContext`showLoadingPage[
        True]; $CellContext`directoryitem = \
$CellContext`FSAddItemChildren[$CellContext`item, 
          $CellContext`FSDirectoryItems[$CellContext`item]]; \
$CellContext`showLoadingPage[
        False], $CellContext`directoryitem = $CellContext`item], \
$CellContext`FSAddItemChildren[
       Pattern[$CellContext`item, 
        $CellContext`FSItem[
         Blank[], 
         Blank[], 
         Blank[]]], 
       Pattern[$CellContext`children, 
        Blank[List]]] := Append[
       Append[$CellContext`item, 
        None], $CellContext`children], $CellContext`FSAddItemChildren[
       Pattern[$CellContext`item, 
        $CellContext`FSItem[
         Blank[], 
         Blank[], 
         Blank[], 
         Blank[]]], 
       Pattern[$CellContext`children, 
        Blank[List]]] := 
     Append[$CellContext`item, $CellContext`children], \
$CellContext`FSAddItemChildren[
       Pattern[$CellContext`item, 
        Blank[$CellContext`FSItem]], 
       Pattern[$CellContext`children, 
        Blank[]]] := $CellContext`item, $CellContext`FSDirectoryItems[
       Pattern[$CellContext`item, 
        Blank[$CellContext`FSItem]]] := Condition[{}, 
       Not[
        $CellContext`FSItemDirectoryQ[$CellContext`item]]], \
$CellContext`FSDirectoryItems[
       Pattern[$CellContext`item, 
        Blank[$CellContext`FSItem]]] := 
     Block[{$CellContext`children = \
$CellContext`FSItemChildren[$CellContext`item]}, 
       Condition[$CellContext`children, 
        ListQ[$CellContext`children]]], $CellContext`FSDirectoryItems[
       PatternTest[
        Pattern[$CellContext`item, 
         Blank[$CellContext`FSItem]], $CellContext`FSLocalItemQ]] := 
     Map[$CellContext`FSItem["Local", #, 
        FileType[#]]& , 
       FileNames["*", 
        $CellContext`FSItemPath[$CellContext`item]]], \
$CellContext`FSDirectoryItems[
       PatternTest[
        Pattern[$CellContext`item, 
         Blank[$CellContext`FSItem]], $CellContext`FSCloudItemQ]] := 
     Module[{$CellContext`objs, $CellContext`objinfo, $CellContext`infos, \
$CellContext`ordering}, $CellContext`objs = $CellContext`cachedCloudObjects[
          $CellContext`FSItemPath[$CellContext`item]]; $CellContext`objinfo = 
        Quiet[
          Cases[
           MapThread[List, {$CellContext`objs, 
             $CellContext`cachedCloudObjectInformation[$CellContext`objs]}], {
           
            Blank[CloudObject], 
            Blank[CloudObjectInformationData]}]]; $CellContext`setStatus[
        None]; $CellContext`objs = 
        Part[$CellContext`objinfo, All, 1]; $CellContext`infos = 
        Part[$CellContext`objinfo, All, 2]; $CellContext`ordering = Quiet[
          Ordering[
           Map[{
             Part[#, 1, "FileType"], 
             Part[#, 1, "Name"]}& , $CellContext`infos]]]; $CellContext`objs = 
        Part[$CellContext`objs, $CellContext`ordering]; $CellContext`infos = 
        Part[$CellContext`infos, $CellContext`ordering]; 
       MapThread[$CellContext`FSItem["Cloud", #, 
          
          Part[#2, 1, 
           "FileType"], #2]& , {$CellContext`objs, $CellContext`infos}]], \
$CellContext`FSItemDirectoryQ[
       Pattern[$CellContext`item, 
        Blank[]]] := $CellContext`FSItemType[$CellContext`item] === 
      Directory, $CellContext`FSItemType[
       Pattern[$CellContext`item, 
        $CellContext`FSItem[
         Blank[], 
         Blank[], 
         Pattern[$CellContext`type, 
          Blank[]], 
         BlankNullSequence[]]]] := $CellContext`type, \
$CellContext`FSLocalItemQ[
       Pattern[$CellContext`item, 
        Blank[$CellContext`FSItem]]] := \
$CellContext`FSItemLocation[$CellContext`item] === 
      "Local", $CellContext`FSItemLocation[
       Pattern[$CellContext`item, 
        $CellContext`FSItem[
         Pattern[$CellContext`loc, 
          Blank[]], 
         BlankNullSequence[]]]] := $CellContext`loc, $CellContext`FSCloudItemQ[
       Pattern[$CellContext`item, 
        Blank[$CellContext`FSItem]]] := \
$CellContext`FSItemLocation[$CellContext`item] === 
      "Cloud", $CellContext`FSForgetItemChildren[
       Pattern[$CellContext`item, 
        $CellContext`FSItem[
         Blank[], 
         Blank[], 
         Blank[], 
         Blank[], 
         Blank[]]]] := 
     Most[$CellContext`item], $CellContext`FSForgetItemChildren[
       Pattern[$CellContext`item, 
        Blank[$CellContext`FSItem]]] := $CellContext`item, \
$CellContext`$defaultStyle = {
      "DialogStyle", FontColor -> 
       GrayLevel[0.85]}, $CellContext`cloudFilesStripeAppearance = 
     Appearance -> {
       "Default" -> 
        FrontEnd`ToFileName[{"Dialogs", "CloudDialogs"}, 
          "TitleBar.9.png"]}, $CellContext`$defaultHeavyStyle = {
      "DialogStyle", FontColor -> GrayLevel[0.85], 
       Bold}, $CellContext`CurrentDirectoryStripe[
       Pattern[$CellContext`item, 
        Blank[]], 
       Dynamic[
        Pattern[$CellContext`directoryitem, 
         Blank[]]], 
       Pattern[$CellContext`menuQ, 
        Blank[]]] := Panel[
       Dynamic[
        If[
         $CellContext`FSItemQ[$CellContext`item], 
         Grid[{{
            $CellContext`linkTrail[$CellContext`item, 
             Dynamic[$CellContext`directoryitem]]}}], 
         $CellContext`FSItemLabel[
         "Home"]]], $CellContext`directoryStripeAppearance, 
       BaseStyle -> $CellContext`$defaultStyle, ImageSize -> 
       Dynamic[{AbsoluteCurrentValue[
            FrontEnd`EvaluationNotebook[], {WindowSize, 1}] + 0, 40}], 
       FrameMargins -> {{15, 15}, {0, 0}}, 
       Alignment -> {Left, Center}], $CellContext`linkTrail[
       Pattern[$CellContext`item, 
        Blank[$CellContext`FSItem]], 
       Dynamic[
        Pattern[$CellContext`directoryitem, 
         Blank[]]]] := Condition[
       Module[{$CellContext`path, $CellContext`labels, $CellContext`dirs, \
$CellContext`button}, $CellContext`path = \
$CellContext`FSItemPath[$CellContext`item]; $CellContext`labels = 
         FileNameSplit[$CellContext`path]; $CellContext`dirs = Reverse[
           NestList[
           DirectoryName, $CellContext`path, Length[$CellContext`labels] - 
            1]]; $CellContext`button[
           Pattern[$CellContext`label, 
            Blank[]], 
           Pattern[$CellContext`dir, 
            Blank[]]] := Button[
           Mouseover[$CellContext`label, 
            Style[$CellContext`label, Underlined, FontColor -> GrayLevel[1]]], 
           $CellContext`DoSetDirectory[
            $CellContext`FSItem["Local", $CellContext`dir, Directory], 
            Dynamic[$CellContext`directoryitem]], Appearance -> None, 
           BaseStyle -> $CellContext`$defaultStyle, Method -> "Queued"]; Row[
          
          MapThread[$CellContext`button, {$CellContext`labels, \
$CellContext`dirs}], "/", 
          BaseStyle -> {
           PrivateFontOptions -> {"OperatorSubstitution" -> False}}]], 
       $CellContext`FSLocalItemQ[$CellContext`item]], $CellContext`linkTrail[
       Pattern[$CellContext`item, 
        Blank[$CellContext`FSItem]], 
       Dynamic[
        Pattern[$CellContext`directoryitem, 
         Blank[]]]] := Condition[
       Module[{$CellContext`historylist, $CellContext`button, \
$CellContext`menu, $CellContext`separator}, $CellContext`button[
           Pattern[$CellContext`diritem, 
            Blank[$CellContext`FSItem]]] := Button[
           Mouseover[
            $CellContext`FSItemLabel[$CellContext`diritem], 
            Style[
             $CellContext`FSItemLabel[$CellContext`diritem], FontColor -> 
             Orange], BaselinePosition -> 
            Baseline], $CellContext`trimHistory[$CellContext`diritem]; \
$CellContext`DoSetDirectory[$CellContext`diritem, 
             Dynamic[$CellContext`directoryitem]], Appearance -> None, 
           BaseStyle -> $CellContext`$defaultStyle, BaselinePosition -> 
           Baseline, Method -> "Queued"]; $CellContext`menu[
           Pattern[$CellContext`diritems, {
             BlankSequence[$CellContext`FSItem]}]] := ActionMenu[
           Framed[
            Grid[{{
               $CellContext`imageResource["LinkTrailFolder.png"], 
               "\[DownPointer]"}}], Background -> GrayLevel[0.1], 
            FrameMargins -> {{5, 5}, {2, 2}}, RoundingRadius -> 3, FrameStyle -> 
            None], 
           
           Map[$CellContext`FSItemName[#] :> ($CellContext`trimHistory[#]; \
$CellContext`DoSetDirectory[#, 
               
               Dynamic[$CellContext`directoryitem]])& , \
$CellContext`diritems], Appearance -> None, Method -> "Queued", MenuStyle -> 
           "DialogStyle"]; $CellContext`separator = Pane[
           $CellContext`imageResource["LinkTrailSeparator.png"], 
           BaselinePosition -> (Bottom -> Baseline), ContentPadding -> False, 
           ImageMargins -> {{3, 3}, {0, 
            0}}]; $CellContext`historylist = $CellContext`getHistory[]; 
        If[Length[$CellContext`historylist] < 4, 
          Row[
           Flatten[{
             Map[$CellContext`button, 
              Most[$CellContext`historylist]], 
             $CellContext`FSItemLabel[
              Last[$CellContext`historylist]]}], $CellContext`separator], 
          Row[
           Flatten[{
             $CellContext`menu[
              Reverse[
               Drop[$CellContext`historylist, -2]]], 
             $CellContext`button[
              Part[$CellContext`historylist, -2]], 
             $CellContext`FSItemLabel[
              Last[$CellContext`historylist]]}], $CellContext`separator]]], 
       $CellContext`FSCloudItemQ[$CellContext`item]], \
$CellContext`FSItemLabel["Home"] := Grid[{{
         Style[
          $CellContext`imageResource["HomeIcon.png"], 
          GraphicsBoxOptions -> {
           BaselinePosition -> (Scaled[0.15] -> Baseline)}], 
         $CellContext`textResource["Home"]}}, 
       BaselinePosition -> {1, 2}], $CellContext`FSItemLabel[
       PatternTest[
        Pattern[$CellContext`item, 
         Blank[$CellContext`FSItem]], $CellContext`FSLocalItemQ]] := \
$CellContext`FSItemName[$CellContext`item], $CellContext`FSItemLabel[
       PatternTest[
        Pattern[$CellContext`item, 
         Blank[$CellContext`FSItem]], $CellContext`FSCloudItemQ]] := Replace[
       Quiet[
        Part[
         $CellContext`FSItemInfo[$CellContext`item], 
         "Name"]], {$WolframUUID -> $CellContext`FSItemLabel["Home"], 
        Pattern[$CellContext`s, 
          Blank[String]] :> $CellContext`s, Blank[] :> 
        "unknown"}], $CellContext`FSItemName[
       PatternTest[
        Pattern[$CellContext`item, 
         Blank[$CellContext`FSItem]], $CellContext`FSLocalItemQ]] := 
     FileNameTake[
       $CellContext`FSItemPath[$CellContext`item]], $CellContext`FSItemName[
       PatternTest[
        Pattern[$CellContext`item, 
         Blank[$CellContext`FSItem]], $CellContext`FSCloudItemQ]] := Replace[
       Quiet[
        Part[
         $CellContext`FSItemInfo[$CellContext`item], "Name"]], {$WolframUUID -> 
        "Home", Pattern[$CellContext`s, 
          Blank[String]] :> $CellContext`s, Blank[] :> 
        "unknown"}], $CellContext`FSItemInfo[
       Pattern[$CellContext`item, 
        $CellContext`FSItem[
         Blank[], 
         Blank[], 
         Blank[], 
         CloudObjectInformationData[
          Pattern[$CellContext`info, 
           Blank[]]], 
         BlankNullSequence[]]]] := $CellContext`info, $CellContext`FSItemInfo[
      
       Pattern[$CellContext`item, 
        Blank[$CellContext`FSItem]]] := 
     None, $CellContext`directoryStripeAppearance = 
     Appearance -> {
       "Default" -> 
        FrontEnd`ToFileName[{"Dialogs", "CloudDialogs"}, 
          "RootTitleBar.9.png"]}, $CellContext`CustomAnimator["ProgressBar"] := 
     RawBoxes[
       DynamicModuleBox[{Typeset`var = 0}, 
        OverlayBox[{
          AnimatorBox[
           Dynamic[Typeset`var], {0, 14}, AnimationDirection -> Backward, 
           AppearanceElements -> {}, DefaultDuration -> 1, 
           ImageSize -> {1, 1}], 
          PaneBox[
           DynamicBox[
            FEPrivate`ImportImage[
             
             FrontEnd`ToFileName[{"Dialogs", "CloudDialogs"}, 
              "ProgressBar.png"]]], ImageSize -> {
             Scaled[1], 16}, ImageSizeAction -> Clip, ScrollPosition -> 
           Dynamic[{Typeset`var, 0}, Null]], 
          PanelBox[
          "", Appearance -> {
            "Default" -> 
             FrontEnd`ToFileName[{"Dialogs", "CloudDialogs"}, 
               "ProgressBarForeground.9.png"]}, ImageSize -> {
             Scaled[1], 16}]}]]], $CellContext`CustomAnimator[
      "ProgressSpinner"] := RawBoxes[
       DynamicModuleBox[{Typeset`var = 0}, 
        OverlayBox[{
          AnimatorBox[
           Dynamic[Typeset`var], {0, 6.283185307179586}, AnimationDirection -> 
           Backward, AppearanceElements -> {}, DefaultDuration -> 1.75, 
           ImageSize -> {1, 1}], 
          GraphicsBox[
           InsetBox[
            DynamicBox[
             FEPrivate`ImportImage[
              
              FrontEnd`ToFileName[{"Dialogs", "CloudDialogs"}, 
               "ProgressSpinner.png"]]], {Center, Center}, {Center, Center}, 
            Automatic, 
            Dynamic[{
              Cos[Typeset`var], 
              Sin[Typeset`var]}]], ImageSize -> {100, 100}]}, 
         Alignment -> {
          Center, Center}]]], $CellContext`defaultButtonAppearance = 
     Appearance -> {
       "ButtonType" -> "Default", "Default" -> 
        FrontEnd`ToFileName[{"Dialogs", "CloudDialogs"}, "RedButton.9.png"], 
        "Hover" -> FrontEnd`ToFileName[{"Dialogs", "CloudDialogs"}, 
          "RedButtonHover.9.png"], "Pressed" -> 
        FrontEnd`ToFileName[{"Dialogs", "CloudDialogs"}, 
          "RedButtonPressed.9.png"], "Disabled" -> 
        FrontEnd`ToFileName[{"Dialogs", "CloudDialogs"}, 
          "RedButtonDisabled.9.png"]}, $CellContext`ItemRow[
       Pattern[$CellContext`item, 
        Blank[$CellContext`FSItem]], 
       Dynamic[
        Pattern[$CellContext`directoryitem, 
         Blank[]]]] := DynamicModule[{$CellContext`busy = False}, 
       Tooltip[
        Panel[
         Grid[{{
            $CellContext`itemOpenButton[$CellContext`item, 
             Dynamic[$CellContext`directoryitem], 
             Dynamic[$CellContext`busy]]}}, Alignment -> Left], Alignment -> 
         Left, $CellContext`itemRowAppearance, 
         FrameMargins -> {{0, 0}, {0, 0}}, ImageSize -> {
           Scaled[1], 40}], 
        $CellContext`itemTooltip[$CellContext`item], TooltipDelay -> 
        Automatic, 
        DefaultTooltipStyle -> {
         Background -> GrayLevel[0.1]}]], $CellContext`ItemRow[
       Pattern[$CellContext`item, 
        Blank[$CellContext`FSItem]], 
       Dynamic[
        Pattern[$CellContext`directoryitem, 
         Blank[]]], 
       Dynamic[
        Pattern[$CellContext`selecteditems, 
         Blank[]]], 
       Dynamic[
        Pattern[$CellContext`savefilename, 
         Blank[]]], 
       Pattern[$CellContext`dialogType, 
        "Open"]] := $CellContext`itemSelectButton[$CellContext`item, True, 
       True, 
       Dynamic[$CellContext`directoryitem], 
       Dynamic[$CellContext`selecteditems], 
       Dynamic[$CellContext`savefilename], $CellContext`dialogType], \
$CellContext`ItemRow[
       Pattern[$CellContext`item, 
        Blank[$CellContext`FSItem]], 
       Dynamic[
        Pattern[$CellContext`directoryitem, 
         Blank[]]], 
       Dynamic[
        Pattern[$CellContext`selecteditems, 
         Blank[]]], 
       Dynamic[
        Pattern[$CellContext`savefilename, 
         Blank[]]], 
       Pattern[$CellContext`dialogType, 
        "Save"]] := $CellContext`itemSelectButton[$CellContext`item, 
       False, $CellContext`FSItemType[$CellContext`item] === Directory, 
       Dynamic[$CellContext`directoryitem], 
       Dynamic[$CellContext`selecteditems], 
       Dynamic[$CellContext`savefilename], $CellContext`dialogType], \
$CellContext`itemOpenButton[
       Pattern[$CellContext`item, 
        Blank[$CellContext`FSItem]], 
       Dynamic[
        Pattern[$CellContext`directoryitem, 
         Blank[]]], 
       Dynamic[
        Pattern[$CellContext`busy, 
         Blank[]]]] := Button[
       Grid[{{
          
          PaneSelector[{
           True -> Animator[Appearance -> "Necklace", ImageSize -> 20], 
            False -> $CellContext`itemIcon[$CellContext`item, True]}, 
           Dynamic[
            TrueQ[$CellContext`busy]]], 
          $CellContext`FSItemName[$CellContext`item]}}], $CellContext`busy = 
        True; $CellContext`DoOpenItem[$CellContext`item, 
         Dynamic[$CellContext`directoryitem]]; $CellContext`busy = False; 
       Null, Alignment -> Left, $CellContext`openButtonAppearance, 
       BaseStyle -> $CellContext`$defaultStyle, 
       FrameMargins -> {{15, 0}, {0, 0}}, ImageSize -> {
         Scaled[1], 40}, Method -> "Queued"], $CellContext`itemIcon[
       Pattern[$CellContext`item, 
        Blank[$CellContext`FSItem]], 
       Pattern[$CellContext`enabled, 
        Blank[]]] := 
     Block[{$CellContext`resname}, $CellContext`resname = Switch[
          $CellContext`FSItemType[$CellContext`item], File, 
          Replace[
           ToLowerCase[
            $CellContext`FSItemExtension[$CellContext`item]], {
           "css" -> "FileIconCSS", "html" -> "FileIconHTML", "js" -> 
            "FileIconJavaScript", Alternatives["nb", "nbp", "cdf"] -> 
            "FileIconNotebook", Alternatives["m", "wl"] -> "FileIconPackage", 
            "xml" -> "FileIconXML", Blank[] -> "FileIconUnknown"}], Directory,
           "FolderIcon", 
          Blank[], "FileIconUnknown"]; $CellContext`imageResource[
         StringJoin[$CellContext`resname, 
          
          If[$CellContext`enabled, ".png", 
           "Disabled.png"]]]], $CellContext`FSItemExtension[
       PatternTest[
        Pattern[$CellContext`item, 
         Blank[$CellContext`FSItem]], $CellContext`FSLocalItemQ]] := 
     FileExtension[
       $CellContext`FSItemPath[$CellContext`item]], \
$CellContext`FSItemExtension[
       PatternTest[
        Pattern[$CellContext`item, 
         Blank[$CellContext`FSItem]], $CellContext`FSCloudItemQ]] := 
     FileExtension[
       $CellContext`FSItemName[$CellContext`item]], $CellContext`DoOpenItem[
       Pattern[$CellContext`item, 
        Blank[$CellContext`FSItem]], 
       Dynamic[
        Pattern[$CellContext`directoryitem, 
         Blank[]]]] := Switch[
       $CellContext`FSItemType[$CellContext`item], 
       Directory, $CellContext`addHistory[$CellContext`item]; \
$CellContext`DoSetDirectory[$CellContext`item, 
         Dynamic[$CellContext`directoryitem]], File, 
       $CellContext`FSOpenItem[$CellContext`item]], $CellContext`FSOpenItem[
       PatternTest[
        Pattern[$CellContext`item, 
         Blank[$CellContext`FSItem]], $CellContext`FSLocalItemQ]] := 
     SystemOpen[
       $CellContext`FSItemPath[$CellContext`item]], $CellContext`FSOpenItem[
       PatternTest[
        Pattern[$CellContext`item, 
         Blank[$CellContext`FSItem]], $CellContext`FSCloudItemQ]] := 
     With[{$CellContext`name = $CellContext`FSItemName[$CellContext`item], \
$CellContext`url = Replace[
          $CellContext`FSItemPath[$CellContext`item], {CloudObject[
             Pattern[$CellContext`a, 
              Blank[String]], 
             BlankNullSequence[]] :> $CellContext`a}]}, 
       FE`Evaluate[
        FEPrivate`OpenCloudObject[
         FrontEnd`CloudObject[$CellContext`url, {
          "Name" -> $CellContext`name}]]]], $CellContext`openButtonAppearance = 
     Appearance -> {
       "Default" -> 
        FrontEnd`ToFileName[{"Dialogs", "CloudDialogs"}, 
          "Blank.9.png"]}, $CellContext`itemRowAppearance = 
     Appearance -> {
       "Default" -> 
        FrontEnd`ToFileName[{"Dialogs", "CloudDialogs"}, "Row.9.png"], 
        "Hover" -> FrontEnd`ToFileName[{"Dialogs", "CloudDialogs"}, 
          "RowHover.9.png"]}, $CellContext`itemTooltip[
       Pattern[$CellContext`item, 
        Blank[$CellContext`FSItem]]] := Panel[
       Column[
        Flatten[{
          Row[{
            $CellContext`textResource["Modified"], 
            $CellContext`itemLastModified[$CellContext`item]}], 
          If[$CellContext`FSItemType[$CellContext`item] === File, 
           Row[{
             $CellContext`textResource["Size"], 
             $CellContext`itemSize[$CellContext`item]}], {}], 
          Row[{
            $CellContext`textResource["Type"], 
            $CellContext`itemComputedType[$CellContext`item]}], 
          Row[{
            $CellContext`textResource["Owner"], 
            $CellContext`FSItemOwner[$CellContext`item]}], 
          If[False, 
           Row[{
             $CellContext`textResource["Permissions"], 
             $CellContext`FSItemPermissions[$CellContext`item]}], {}]}]], \
$CellContext`tooltipAppearance, BaseStyle -> $CellContext`$defaultStyle, 
       ImageSize -> {Automatic, Automatic}, FrameMargins -> 
       10], $CellContext`itemLastModified[
       Pattern[$CellContext`item, 
        Blank[$CellContext`FSItem]]] := Replace[
       $CellContext`FSItemModificationDate[$CellContext`item], 
       Pattern[$CellContext`date, 
         Blank[
         DateObject]] :> $CellContext`formatRelativeDate[$CellContext`date]], \
$CellContext`FSItemModificationDate[
       PatternTest[
        Pattern[$CellContext`item, 
         Blank[$CellContext`FSItem]], $CellContext`FSLocalItemQ]] := Replace[
       FileDate[
        $CellContext`FSItemPath[$CellContext`item]], Except[
         Blank[DateObject]] -> "--"], $CellContext`FSItemModificationDate[
       PatternTest[
        Pattern[$CellContext`item, 
         Blank[$CellContext`FSItem]], $CellContext`FSCloudItemQ]] := Quiet[
       Replace[
        Part[
         $CellContext`FSItemInfo[$CellContext`item], "LastModified"], Except[
          Blank[DateObject]] -> "--"]], $CellContext`formatRelativeDate[
       Pattern[$CellContext`filedate, 
        Blank[DateObject]]] := 
     Module[{$CellContext`date, $CellContext`day}, $CellContext`date = 
        TimeZoneConvert[$CellContext`filedate]; $CellContext`day = 
        DateValue[$CellContext`date, "Day", DateObject]; 
       Switch[$CellContext`day, 
         DateValue[
          DateObject[], "Day", DateObject], $CellContext`day = "Today", 
         DateValue[
          DatePlus[
           DateObject[], -1], "Day", DateObject], $CellContext`day = 
         "Yesterday", 
         Blank[], $CellContext`day = 
         DateString[$CellContext`day, "DateShort"]]; 
       StringJoin[$CellContext`day, ", ", 
         DateString[$CellContext`date, "Time"]]], $CellContext`itemSize[
       Pattern[$CellContext`item, 
        Blank[$CellContext`FSItem]]] := 
     Block[{$CellContext`size, $CellContext`q}, 
       If[$CellContext`FSItemType[$CellContext`item] =!= File, 
         Return[
         "--"]]; $CellContext`size = \
$CellContext`FSItemSize[$CellContext`item]; If[
         Not[
          NumericQ[$CellContext`size]], 
         Return["--"]]; $CellContext`q = 
        Quantity[$CellContext`size, "Bytes"]; $CellContext`q = 
        Which[$CellContext`size > 10^9, 
          N[
           UnitConvert[$CellContext`q, "Gigabytes"]], $CellContext`size > 
          10^6, 
          N[
           UnitConvert[$CellContext`q, "Megabytes"]], $CellContext`size > 
          10^3, 
          N[
           UnitConvert[$CellContext`q, "Kilobytes"]], True, $CellContext`q]; 
       If[Head[$CellContext`q] === Quantity, 
         TraditionalForm[$CellContext`q], "--"]], $CellContext`FSItemSize[
       PatternTest[
        Pattern[$CellContext`item, 
         Blank[$CellContext`FSItem]], $CellContext`FSLocalItemQ]] := 
     FileByteCount[
       $CellContext`FSItemPath[$CellContext`item]], $CellContext`FSItemSize[
       PatternTest[
        Pattern[$CellContext`item, 
         Blank[$CellContext`FSItem]], $CellContext`FSCloudItemQ]] := Quiet[
       Replace[
        Part[
         $CellContext`FSItemInfo[$CellContext`item], "FileByteCount"], {
        PatternTest[
           Pattern[$CellContext`s, 
            Blank[String]], DigitQ] :> ToExpression[$CellContext`s], 
         Pattern[$CellContext`i, 
           Blank[Integer]] :> $CellContext`i, Blank[] -> 
         "--"}]], $CellContext`itemComputedType[
       Pattern[$CellContext`item, 
        Blank[$CellContext`FSItem]]] := 
     Module[{$CellContext`filetype, $CellContext`mimetype}, \
$CellContext`filetype = $CellContext`FSItemType[$CellContext`item]; 
       If[$CellContext`filetype === Directory, 
         Return[
         Directory]]; $CellContext`mimetype = \
$CellContext`FSItemMimeType[$CellContext`item]; 
       If[$CellContext`mimetype === None, $CellContext`filetype, 
         Row[{$CellContext`filetype, " (", $CellContext`mimetype, 
           ")"}]]], $CellContext`FSItemMimeType[
       PatternTest[
        Pattern[$CellContext`item, 
         Blank[$CellContext`FSItem]], $CellContext`FSLocalItemQ]] := 
     None, $CellContext`FSItemMimeType[
       PatternTest[
        Pattern[$CellContext`item, 
         Blank[$CellContext`FSItem]], $CellContext`FSCloudItemQ]] := Quiet[
       Replace[
        Part[
         $CellContext`FSItemInfo[$CellContext`item], "MimeType"], Except[
          Blank[String]] -> None]], $CellContext`FSItemOwner[
       PatternTest[
        Pattern[$CellContext`item, 
         Blank[$CellContext`FSItem]], $CellContext`FSLocalItemQ]] := 
     "--", $CellContext`FSItemOwner[
       PatternTest[
        Pattern[$CellContext`item, 
         Blank[$CellContext`FSItem]], $CellContext`FSCloudItemQ]] := Quiet[
       Replace[
        Part[
         $CellContext`FSItemInfo[$CellContext`item], 
         "OwnerWolframUUID"], {$WolframUUID :> $WolframID, 
         Pattern[$CellContext`s, 
           Blank[String]] :> $CellContext`s, Blank[] -> 
         "--"}]], $CellContext`FSItemPermissions[
       PatternTest[
        Pattern[$CellContext`item, 
         Blank[$CellContext`FSItem]], $CellContext`FSLocalItemQ]] := 
     "--", $CellContext`FSItemPermissions[
       PatternTest[
        Pattern[$CellContext`item, 
         Blank[$CellContext`FSItem]], $CellContext`FSCloudItemQ]] := 
     "--", $CellContext`tooltipAppearance = 
     Appearance -> {
       "Default" -> 
        FrontEnd`ToFileName[{"Dialogs", "CloudDialogs"}, 
          "Tooltip.9.png"]}, $CellContext`itemSelectButton[
       Pattern[$CellContext`item, 
        Blank[$CellContext`FSItem]], 
       Pattern[$CellContext`allowmultiselect, 
        Blank[]], 
       Pattern[$CellContext`enabled, 
        Blank[]], 
       Dynamic[
        Pattern[$CellContext`directoryitem, 
         Blank[]]], 
       Dynamic[
        Pattern[$CellContext`selecteditems, 
         Blank[]]], 
       Dynamic[
        Pattern[$CellContext`savefilename, 
         Blank[]]], 
       Pattern[$CellContext`dialogType, 
        Blank[]]] := Style[
       Button[
        Row[{
          $CellContext`itemIcon[$CellContext`item, $CellContext`enabled], 
          $CellContext`FSItemName[$CellContext`item]}, "   ", StripOnInput -> 
         True], 
        If[$CellContext`enabled, 
         $CellContext`DoSelectItem[$CellContext`item, \
$CellContext`allowmultiselect, 
          Dynamic[$CellContext`directoryitem], 
          Dynamic[$CellContext`selecteditems]], 
         If[$CellContext`dialogType === 
          "Save", $CellContext`savefilename = \
$CellContext`FSItemName[$CellContext`item]]], Alignment -> Left, 
        $CellContext`getSelectedItemRowApperance[$CellContext`item, \
$CellContext`enabled, 
         Dynamic[$CellContext`selecteditems]], BaseStyle -> 
        If[$CellContext`enabled, $CellContext`$defaultStyle, \
$CellContext`$defaultDisabledStyle], Enabled -> True, 
        FrameMargins -> {{15, 0}, {0, 0}}, ImageSize -> {
          Scaled[1], 40}, Method -> "Queued", Tooltip -> ToBoxes[
          $CellContext`itemTooltip[$CellContext`item]], TooltipDelay -> 
        Automatic, DefaultTooltipStyle -> {Background -> GrayLevel[0.1]}], 
       With[{$CellContext`hot = $CellContext`$selectedItemRowColor, \
$CellContext`cool = $CellContext`$unselectedItemRowColor}, Background :> 
        FEPrivate`If[
          
          FEPrivate`MemberQ[$CellContext`selecteditems, $CellContext`item], \
$CellContext`hot, $CellContext`cool]]], $CellContext`DoSelectItem[
       Pattern[$CellContext`item, 
        Blank[]], 
       Pattern[$CellContext`allowmultiselect, 
        Blank[]], 
       Dynamic[
        Pattern[$CellContext`directoryitem, 
         Blank[]]], 
       Dynamic[
        Pattern[$CellContext`selecteditems, 
         Blank[]]]] := Switch[{
        CurrentValue["MouseClickCount"], 
        Or[
         CurrentValue["CommandKey"], 
         CurrentValue["ControlKey"]]}, {
       1, False}, $CellContext`selecteditems = {$CellContext`item}, {1, True}, 
       If[
        MemberQ[$CellContext`selecteditems, $CellContext`item], \
$CellContext`selecteditems = 
        DeleteCases[$CellContext`selecteditems, $CellContext`item], \
$CellContext`selecteditems = If[$CellContext`allowmultiselect, 
          DeleteDuplicates[
           
           Flatten[{$CellContext`selecteditems, $CellContext`item}]], \
{$CellContext`item}]], {2, 
        Blank[]}, 
       $CellContext`OpenSelectedItems[
        Dynamic[$CellContext`directoryitem], 
        Dynamic[$CellContext`selecteditems]], {
        Blank[], 
        Blank[]}, Null], $CellContext`OpenSelectedItems[
       Dynamic[
        Pattern[$CellContext`directoryitem, 
         Blank[]]], 
       Dynamic[
        Pattern[$CellContext`selecteditems, 
         Blank[]]]] := 
     Module[{$CellContext`types}, $CellContext`types = 
        Map[$CellContext`FSItemType, $CellContext`selecteditems]; If[
         MatchQ[$CellContext`types, 
          Alternatives[{
            Repeated[File]}, {Directory}]], Scan[$CellContext`DoOpenItem[#, 
            
            Dynamic[$CellContext`directoryitem]]& , \
$CellContext`selecteditems]; If[
           MatchQ[$CellContext`types, {
             Repeated[File]}], 
           $CellContext`CloudFileDialogReturn[], $CellContext`selecteditems = \
{}]; Null, 
         Beep[]]], $CellContext`getSelectedItemRowApperance[
       Pattern[$CellContext`this, 
        Blank[]], 
       Pattern[$CellContext`enabled, False], 
       BlankNullSequence[]] := 
     Appearance -> $CellContext`disabledItemRowAppearance, \
$CellContext`getSelectedItemRowApperance[
       Pattern[$CellContext`this, 
        Blank[]], 
       Pattern[$CellContext`enabled, True], 
       BlankNullSequence[]] := 
     Appearance -> $CellContext`transparentRowAppearance, \
$CellContext`disabledItemRowAppearance = {
      "Default" -> 
       FrontEnd`ToFileName[{"Dialogs", "CloudDialogs"}, 
         "RowDisabled.9.png"]}, $CellContext`transparentRowAppearance = {
      "Default" -> 
       FrontEnd`ToFileName[{"Dialogs", "CloudDialogs"}, 
         "TransparentRow.9.png"], "Hover" -> 
       FrontEnd`ToFileName[{"Dialogs", "CloudDialogs"}, 
         "TransparentRowHover.9.png"]}, $CellContext`$defaultDisabledStyle = {
      "DialogStyle", FontColor -> 
       GrayLevel[0.65]}, $CellContext`$selectedItemRowColor = 
     RGBColor[0.6706, 0.1608, 0.2235], $CellContext`$unselectedItemRowColor = 
     GrayLevel[0.2863], $CellContext`NoItemsRow[] := Panel[
       $CellContext`textResource["EmptyDirectory"], Alignment -> Center, 
       BaseStyle -> Flatten[{$CellContext`$defaultStyle, Italic}], 
       $CellContext`getSelectedItemRowApperance[Null, False], 
       FrameMargins -> {{0, 0}, {0, 0}}, ImageSize -> {
         Scaled[1], 40}], $CellContext`CancelSelectedItemsButton[] := 
     CancelButton[
       $CellContext`textResource["Cancel"], 
       $CellContext`CloudFileDialogReturn[], 
       Evaluate[$CellContext`cancelButtonAppearance], 
       FrameMargins -> {{30, 30}, {0, 0}}, 
       BaseStyle -> $CellContext`$defaultHeavyStyle, ImageSize -> 
       Automatic], $CellContext`cancelButtonAppearance = 
     Appearance -> {
       "ButtonType" -> "Cancel", "Default" -> 
        FrontEnd`ToFileName[{"Dialogs", "CloudDialogs"}, "GrayButton.9.png"], 
        "Hover" -> FrontEnd`ToFileName[{"Dialogs", "CloudDialogs"}, 
          "GrayButtonHover.9.png"], "Pressed" -> 
        FrontEnd`ToFileName[{"Dialogs", "CloudDialogs"}, 
          "GrayButtonPressed.9.png"], "Disabled" -> 
        FrontEnd`ToFileName[{"Dialogs", "CloudDialogs"}, 
          "GrayButtonDisabled.9.png"]}, $CellContext`OpenSelectedItemsButton[
       Dynamic[
        Pattern[$CellContext`directoryitem, 
         Blank[]]], 
       Dynamic[
        Pattern[$CellContext`selecteditems, 
         Blank[]]], 
       Pattern[$CellContext`enabled, 
        Blank[]]] := DefaultButton[
       $CellContext`textResource["Open"], 
       $CellContext`OpenSelectedItems[
        Dynamic[$CellContext`directoryitem], 
        Dynamic[$CellContext`selecteditems]], Enabled -> If[
         TrueQ[$CellContext`enabled], 
         Dynamic[$CellContext`selecteditems =!= {}], False], 
       Evaluate[$CellContext`defaultButtonAppearance], 
       FrameMargins -> {{30, 30}, {0, 0}}, 
       BaseStyle -> $CellContext`$defaultHeavyStyle, ImageSize -> Automatic, 
       Method -> "Queued"], $CellContext`footerStripeAppearance = 
     Appearance -> {
       "Default" -> 
        FrontEnd`ToFileName[{"Dialogs", "CloudDialogs"}, 
          "Footer.9.png"]}, $CellContext`SaveAsInputField[
       Dynamic[
        Pattern[$CellContext`savefilename, 
         Blank[]]], 
       Pattern[$CellContext`enabled, 
        Blank[]]] := Grid[{{
         $CellContext`textResource["SaveAsPrompt"], 
         Panel[
          InputField[
           Dynamic[$CellContext`savefilename], String, Appearance -> None, 
           BaseStyle -> {FontColor -> Black}, BoxID -> 
           "CloudSaveAsInputField", ContinuousAction -> True, 
           Enabled -> $CellContext`enabled, ImageSize -> 
           Scaled[1]], $CellContext`inputFieldAppearance, 
          Alignment -> {Center, Center}, ContentPadding -> False, 
          FrameMargins -> {{2, 2}, {0, 0}}]}}, Alignment -> Left, 
       BaseStyle -> $CellContext`$defaultStyle], \
$CellContext`inputFieldAppearance = 
     Appearance -> {
       "Default" -> 
        FrontEnd`ToFileName[{"Dialogs", "CloudDialogs"}, 
          "InputField.9.png"]}, $CellContext`NewDirectoryButton[
       Dynamic[
        Pattern[$CellContext`directoryitem, 
         Blank[]]], 
       Pattern[$CellContext`enabled, 
        Blank[]]] := Button[
       $CellContext`textResource["NewFolder"], 
       FrontEnd`MoveCursorToInputField[
        $CellContext`NewDirectoryDialog[
         Dynamic[$CellContext`directoryitem], 
         ButtonNotebook[]], "CloudNewDirectoryInputField"], 
       Evaluate[$CellContext`newDirectoryButtonAppearance], 
       FrameMargins -> {{20, 20}, {0, 0}}, 
       BaseStyle -> $CellContext`$defaultHeavyStyle, 
       Enabled -> $CellContext`enabled, ImageSize -> 
       Automatic], $CellContext`NewDirectoryDialog[
       Dynamic[
        Pattern[$CellContext`directoryitem, 
         Blank[]]], 
       Pattern[$CellContext`dialognb, 
        Blank[]]] := CreateDialog[
       DynamicModule[{$CellContext`newdirname = "", $CellContext`taken = 
         False, $CellContext`takenlist = Map[ToLowerCase, 
           Map[$CellContext`FSItemName, 
            $CellContext`FSDirectoryItems[$CellContext`directoryitem]]]}, 
        (Pane[#, ImageMargins -> {{0, 0}, {10, 0}}]& )[
         Grid[{{
            $CellContext`textResource["NewFolderPrompt"]}, {
            Panel[
             InputField[
              
              Dynamic[$CellContext`newdirname, ($CellContext`taken = 
               MemberQ[$CellContext`takenlist, 
                 ToLowerCase[$CellContext`newdirname = #]])& ], String, 
              Appearance -> None, ContinuousAction -> True, 
              BaseStyle -> {FontColor -> Black}, BoxID -> 
              "CloudNewDirectoryInputField"], \
$CellContext`inputFieldAppearance, Alignment -> {Center, Center}, 
             ContentPadding -> False, FrameMargins -> {{2, 2}, {0, 0}}]}, {
            
            PaneSelector[{
             True -> $CellContext`textResource["NewFolderConflict"], False -> 
              ""}, 
             Dynamic[$CellContext`taken]]}, {
            Item[
             Grid[{{
                Button[
                 $CellContext`textResource["Cancel"], 
                 DialogReturn[$Canceled], 
                 Evaluate[$CellContext`cancelButtonAppearance], 
                 FrameMargins -> {{30, 30}, {0, 0}}, 
                 BaseStyle -> $CellContext`$defaultHeavyStyle], 
                Button[
                 $CellContext`textResource[
                 "Create"], \
$CellContext`FSNewItem[$CellContext`directoryitem, $CellContext`newdirname, 
                   Directory]; $CellContext`DoRefreshDirectory[
                   Dynamic[$CellContext`directoryitem]]; 
                 DialogReturn[$CellContext`newdirname], 
                 Evaluate[$CellContext`defaultButtonAppearance], 
                 FrameMargins -> {{30, 30}, {0, 0}}, 
                 BaseStyle -> $CellContext`$defaultHeavyStyle, Enabled -> 
                 Dynamic[
                   
                   And[$CellContext`newdirname =!= "", $CellContext`taken === 
                    False]], Method -> "Queued"]}}], Alignment -> Right]}}, 
          Alignment -> Left]], 
        Evaluate[BaseStyle -> $CellContext`$defaultStyle], InheritScope -> 
        True], Deployed -> True, Evaluator -> "System", Saveable -> False, 
       WindowFrame -> "ModalDialog", Background -> GrayLevel[73/255.], 
       WindowTitle -> FEPrivate`FrontEndResource["CloudDialogs", "NewFolder"],
        WindowMargins -> 
       Block[{$CellContext`l, $CellContext`r, $CellContext`b, \
$CellContext`t}, {{$CellContext`l, $CellContext`r}, {$CellContext`b, \
$CellContext`t}} = AbsoluteCurrentValue[$CellContext`dialognb, WindowMargins]; 
         If[
           
           NumericQ[$CellContext`r + $CellContext`b], {{$CellContext`l + 50, 
             Automatic}, {$CellContext`b + 50, Automatic}}, 
           Automatic]]], $CellContext`FSNewItem[
       PatternTest[
        Pattern[$CellContext`parentitem, 
         Blank[$CellContext`FSItem]], $CellContext`FSLocalItemQ], 
       Pattern[$CellContext`name, 
        Blank[]], 
       Pattern[$CellContext`type, 
        Alternatives[File, Directory]]] := 
     Module[{$CellContext`dir, $CellContext`newpath}, $CellContext`dir = \
$CellContext`FSItemPath[$CellContext`parentitem]; $CellContext`newpath = \
$CellContext`findUnusedFileName[$CellContext`dir, $CellContext`name]; 
       Switch[$CellContext`type, Directory, 
         CreateDirectory[$CellContext`newpath], File, 
         Switch[
          ToLowerCase[
           FileExtension[$CellContext`newpath]], "nb", 
          Put[
           Notebook[{}], $CellContext`newpath], "m", 
          Put[$CellContext`newpath], 
          Blank[], Message[
            MessageName[$CellContext`FSNewItem, "unsupt"], 
            
            FileExtension[$CellContext`newpath]]; $CellContext`newpath = \
$Failed]]; If[FileType[$CellContext`newpath] === $CellContext`type, 
         $CellContext`FSItem[
         "Local", $CellContext`newpath, $CellContext`type], $Failed]], \
$CellContext`FSNewItem[
       PatternTest[
        Pattern[$CellContext`parentitem, 
         Blank[$CellContext`FSItem]], $CellContext`FSCloudItemQ], 
       Pattern[$CellContext`name, 
        Blank[]], 
       Pattern[$CellContext`type, 
        Alternatives[File, Directory]]] := 
     Module[{$CellContext`dirobj, $CellContext`newobj}, $CellContext`dirobj = \
$CellContext`FSItemPath[$CellContext`parentitem]; $CellContext`newobj = \
$CellContext`findUnusedFileName[$CellContext`dirobj, $CellContext`name]; 
       Switch[$CellContext`type, Directory, 
         CreateDirectory[$CellContext`newobj], File, 
         Switch[
          ToLowerCase[
           FileExtension[$CellContext`name]], "nb", 
          CloudExport[
           Notebook[{}], "NB", $CellContext`newobj], "m", 
          CloudExport[Null, "Package", $CellContext`newobj], 
          Blank[], Message[
            MessageName[$CellContext`FSNewItem, "unsupt"], 
            
            FileExtension[$CellContext`name]]; $CellContext`newobj = \
$Failed]]; If[FileType[$CellContext`newobj] === $CellContext`type, 
         $CellContext`FSItem[
         "Cloud", $CellContext`newobj, $CellContext`type, 
          $CellContext`cachedCloudObjectInformation[$CellContext`newobj]], \
$Failed]], $CellContext`findUnusedFileName[
       Pattern[$CellContext`dir, 
        Blank[]], 
       Pattern[$CellContext`name, 
        Blank[String]]] := Catch[
       Module[{$CellContext`base, $CellContext`ext, $CellContext`filename, \
$CellContext`c}, If[FileType[$CellContext`dir] =!= Directory, 
          Throw[$Failed]]; $CellContext`filename = 
         FileNameJoin[{$CellContext`dir, $CellContext`name}]; 
        If[FileType[$CellContext`filename] === None, 
          
          Throw[$CellContext`filename]]; $CellContext`base = \
$CellContext`name; 
        If[($CellContext`ext = FileExtension[$CellContext`base]) =!= 
          "", $CellContext`base = 
           StringDrop[$CellContext`name, -(StringLength[$CellContext`ext] + 
              1)]; $CellContext`ext = 
           StringJoin[".", $CellContext`ext]]; $CellContext`c = 2; 
        While[$CellContext`filename = FileNameJoin[{$CellContext`dir, 
              StringJoin[$CellContext`base, "-", 
               ToString[
                Increment[$CellContext`c]], $CellContext`ext]}]; 
          FileType[$CellContext`filename] =!= 
           None]; $CellContext`filename]], \
$CellContext`newDirectoryButtonAppearance = 
     Appearance -> {
       "Default" -> 
        FrontEnd`ToFileName[{"Dialogs", "CloudDialogs"}, "GrayButton.9.png"], 
        "Hover" -> FrontEnd`ToFileName[{"Dialogs", "CloudDialogs"}, 
          "GrayButtonHover.9.png"], "Pressed" -> 
        FrontEnd`ToFileName[{"Dialogs", "CloudDialogs"}, 
          "GrayButtonPressed.9.png"], "Disabled" -> 
        FrontEnd`ToFileName[{"Dialogs", "CloudDialogs"}, 
          "GrayButtonDisabled.9.png"]}, $CellContext`CancelSaveAsButton[] := 
     CancelButton[
       $CellContext`textResource["Cancel"], 
       $CellContext`CloudFileDialogReturn[], 
       Evaluate[$CellContext`cancelButtonAppearance], 
       FrameMargins -> {{30, 30}, {0, 0}}, 
       BaseStyle -> $CellContext`$defaultHeavyStyle, ImageSize -> 
       Automatic], $CellContext`SaveAsButton[
       Dynamic[
        Pattern[$CellContext`savefilename, 
         Blank[]]], 
       Dynamic[
        Pattern[$CellContext`directoryitem, 
         Blank[]]], 
       Pattern[$CellContext`enabled, 
        Blank[]]] := DefaultButton[
       $CellContext`textResource["Save"], 
       With[{$CellContext`nbobj = 
         FrontEnd`Private`$SaveToWolframCloudNotebookObject, \
$CellContext`preferredExtension = 
         FrontEnd`Private`$SaveToWolframCloudFileExtension, \
$CellContext`allowedExtensions = 
         Switch[FrontEnd`Private`$SaveToWolframCloudFileExtension, 
           Alternatives["nb", "cdf"], {"nb", "cdf"}, 
           Alternatives["m", "wl"], {"m", "wl"}, 
           Blank[], {
           FrontEnd`Private`$SaveToWolframCloudFileExtension}], \
$CellContext`overwrite = Automatic, $CellContext`continuationtoken = 
         FrontEnd`Private`$SaveToWolframCloudContinuationToken}, 
        $CellContext`DoSaveAs[$CellContext`nbobj, $CellContext`savefilename, \
$CellContext`preferredExtension, $CellContext`allowedExtensions, \
$CellContext`directoryitem, $CellContext`overwrite, \
$CellContext`continuationtoken]], Enabled -> If[
         TrueQ[$CellContext`enabled], 
         Dynamic[
          Not[
           StringMatchQ[$CellContext`savefilename, 
            Alternatives["", ".*"]]]], False], 
       Evaluate[$CellContext`defaultButtonAppearance], 
       FrameMargins -> {{30, 30}, {0, 0}}, 
       BaseStyle -> $CellContext`$defaultHeavyStyle, ImageSize -> Automatic, 
       Method -> "Queued"], $CellContext`DoSaveAs[
       Pattern[$CellContext`nbobj, 
        Blank[]], 
       Pattern[$CellContext`savefilename, 
        Blank[]], 
       Pattern[$CellContext`preferredExtension, 
        Blank[]], 
       Pattern[$CellContext`allowedExtensions, 
        Blank[]], 
       Pattern[$CellContext`directoryitem, 
        Blank[]], 
       Pattern[$CellContext`overwrite, 
        Blank[]], 
       Pattern[$CellContext`continuationtoken, 
        Blank[]]] := 
     Module[{$CellContext`confirmed = 
        Automatic, $CellContext`filename}, $CellContext`filename = \
$CellContext`savefilename; If[
         Not[
          MemberQ[
           ToLowerCase[$CellContext`allowedExtensions], 
           ToLowerCase[
            FileExtension[$CellContext`filename]]]], $CellContext`filename = 
         StringJoin[$CellContext`filename, 
           ".", $CellContext`preferredExtension]]; If[
         And[
          MemberQ[
           Map[$CellContext`FSItemName, 
            $CellContext`FSDirectoryItems[$CellContext`directoryitem]], \
$CellContext`filename], $CellContext`overwrite === Automatic], 
         $CellContext`FileExistsConfirmDialog[$CellContext`filename, 
          Hold[$CellContext`confirmed], 
          ButtonNotebook[]]]; 
       If[$CellContext`confirmed === False, 
         Null, $CellContext`FSSaveAs[$CellContext`nbobj, \
$CellContext`filename, $CellContext`directoryitem]; 
         Switch[$CellContext`continuationtoken, "None", Null, "Close", 
           NotebookClose[$CellContext`nbobj], "CloseAll", 
           NotebookClose[$CellContext`nbobj]; 
           FrontEndTokenExecute["CloseAll", False], "WolframCloudLogout", 
           NotebookClose[$CellContext`nbobj]; 
           FrontEndTokenExecute["WolframCloudLogout", False], "FrontEndQuit", 
           NotebookClose[$CellContext`nbobj]; 
           FrontEndTokenExecute[
            "FrontEndQuit", 
             False]]; $CellContext`CloudFileDialogReturn[]]], \
$CellContext`FileExistsConfirmDialog[
       Pattern[$CellContext`savefilename, 
        Blank[]], 
       Hold[
        Pattern[$CellContext`confirmed, 
         Blank[]]], 
       Pattern[$CellContext`dialognb, 
        Blank[]]] := DialogInput[
       Pane[
        Grid[{{
           TextCell[
            ToString[
             StringForm[
              $CellContext`textResourceString[
              "ReplaceText"], $CellContext`savefilename]], Larger]}, {
           TextCell[
            $CellContext`textResourceString["ReplaceCaption"]]}, {
           Item[
            Grid[{{
               Button[
                $CellContext`textResource["Cancel"], 
                DialogReturn[$CellContext`confirmed = False], 
                Evaluate[$CellContext`defaultButtonAppearance], 
                FrameMargins -> {{30, 30}, {0, 0}}, 
                BaseStyle -> $CellContext`$defaultHeavyStyle], 
               Button[
                $CellContext`textResource["Replace"], 
                DialogReturn[$CellContext`confirmed = True], 
                Evaluate[$CellContext`replaceButtonAppearance], 
                FrameMargins -> {{30, 30}, {0, 0}}, 
                BaseStyle -> $CellContext`$defaultHeavyStyle]}}], Alignment -> 
            Right]}}, Alignment -> Left, 
         BaseStyle -> $CellContext`$defaultStyle, ItemSize -> Scaled[1], 
         Spacings -> {2, 2}], ImageMargins -> {{0, 0}, {10, 0}}], WindowFrame -> 
       "ModalDialog", WindowSize -> {400, FitAll}, Background -> 
       GrayLevel[73/255.], WindowMargins -> 
       Block[{$CellContext`l, $CellContext`r, $CellContext`b, \
$CellContext`t}, {{$CellContext`l, $CellContext`r}, {$CellContext`b, \
$CellContext`t}} = AbsoluteCurrentValue[$CellContext`dialognb, WindowMargins]; 
         If[
           
           NumericQ[$CellContext`r + $CellContext`b], {{
            Automatic, $CellContext`r + 50}, {$CellContext`b + 50, 
             Automatic}}, Automatic]], 
       NotebookEventActions -> {
        "ReturnKeyDown" :> 
         DialogReturn[$CellContext`confirmed = False], {
          "MenuCommand", "EvaluateCells"} :> 
         DialogReturn[$CellContext`confirmed = False], {
          "MenuCommand", "HandleShiftReturn"} :> 
         DialogReturn[$CellContext`confirmed = False], {
          "MenuCommand", "EvaluateNextCell"} :> 
         DialogReturn[$CellContext`confirmed = False], "EscapeKeyDown" :> 
         DialogReturn[$CellContext`confirmed = False], "WindowClose" :> 
         DialogReturn[$CellContext`confirmed = 
           False]}], $CellContext`replaceButtonAppearance = 
     Appearance -> {
       "Default" -> 
        FrontEnd`ToFileName[{"Dialogs", "CloudDialogs"}, "GrayButton.9.png"], 
        "Hover" -> FrontEnd`ToFileName[{"Dialogs", "CloudDialogs"}, 
          "GrayButtonHover.9.png"], "Pressed" -> 
        FrontEnd`ToFileName[{"Dialogs", "CloudDialogs"}, 
          "GrayButtonPressed.9.png"], "Disabled" -> 
        FrontEnd`ToFileName[{"Dialogs", "CloudDialogs"}, 
          "GrayButtonDisabled.9.png"]}, $CellContext`FSSaveAs[
       Pattern[$CellContext`nbobj, 
        Blank[NotebookObject]], 
       Pattern[$CellContext`savefilename, 
        Blank[String]], 
       PatternTest[
        Pattern[$CellContext`directoryitem, 
         Blank[$CellContext`FSItem]], $CellContext`FSLocalItemQ]] := 
     Module[{$CellContext`newfile}, $CellContext`newfile = FileNameJoin[{
           $CellContext`FSItemPath[$CellContext`directoryitem], \
$CellContext`savefilename}]; 
       NotebookSave[$CellContext`nbobj, $CellContext`newfile]], \
$CellContext`FSSaveAs[
       Pattern[$CellContext`nbobj, 
        Blank[NotebookObject]], 
       Pattern[$CellContext`savefilename, 
        Blank[String]], 
       PatternTest[
        Pattern[$CellContext`directoryitem, 
         Blank[$CellContext`FSItem]], $CellContext`FSCloudItemQ]] := 
     Module[{$CellContext`cloudobj, $CellContext`url, $CellContext`info}, \
$CellContext`cloudobj = FileNameJoin[{
           $CellContext`FSItemPath[$CellContext`directoryitem], \
$CellContext`savefilename}]; $CellContext`url = URL[
          First[$CellContext`cloudobj]]; $CellContext`info = {
         "Name" -> $CellContext`savefilename}; MathLink`CallFrontEnd[
         FrontEnd`WolframCloud`AssignCloudObject[$CellContext`nbobj, \
$CellContext`url, $CellContext`info]]; NotebookSave[$CellContext`nbobj]]}; (
    With[{$CellContext`dialognb = 
       EvaluationNotebook[]}, $CellContext`setStatus[
         Pattern[$CellContext`value, 
          Blank[String]]] := (
        CurrentValue[$CellContext`dialognb, 
          WindowStatusArea] = $CellContext`value); $CellContext`setStatus[
         Pattern[$CellContext`other, 
          Blank[]]] := $CellContext`setStatus[""]; 
      Null]; $CellContext`setStatus[
      $CellContext`textResourceString[
      "statusStarting"]]; $CellContext`baseurl$$ = $CellContext`getBaseURL[]; \
$CellContext`setHistory[
       Pattern[$CellContext`val$, 
        Blank[$CellContext`FSItem]]] := ($CellContext`history$$ = \
{$CellContext`val$}); $CellContext`setHistory[
       Pattern[$CellContext`val$, {
         BlankNullSequence[$CellContext`FSItem]}]] := ($CellContext`history$$ = \
$CellContext`val$); $CellContext`getHistory[] := $CellContext`history$$; \
$CellContext`addHistory[
       Pattern[$CellContext`val$, 
        Blank[$CellContext`FSItem]]] := 
     AppendTo[$CellContext`history$$, $CellContext`val$]; \
$CellContext`trimHistory[
       Pattern[$CellContext`val$, 
        Blank[$CellContext`FSItem]]] := ($CellContext`history$$ = 
      Replace[$CellContext`history$$, {
          Pattern[$CellContext`pre$, 
           BlankNullSequence[]], $CellContext`val$, 
          
          BlankNullSequence[]} :> {$CellContext`pre$, $CellContext`val$}]); \
$CellContext`updateHistory[
       Pattern[$CellContext`item$, 
        Blank[$CellContext`FSItem]]] := 
     With[{$CellContext`path$ = $CellContext`FSItemPath[$CellContext`item$]}, \
$CellContext`history$$ = Replace[$CellContext`history$$, {
           Pattern[$CellContext`a$, 
            BlankNullSequence[]], 
           $CellContext`FSItem[
            Blank[], $CellContext`path$, 
            BlankNullSequence[]], 
           Pattern[$CellContext`b$, 
            
            BlankNullSequence[]]} :> {$CellContext`a$, $CellContext`item$, \
$CellContext`b$}]]; $CellContext`showLoadingPage[
       Pattern[$CellContext`val$, 
        Alternatives[True, False]]] := ($CellContext`loaded$$ = 
      Not[$CellContext`val$]); 
    With[{$CellContext`dialognb = 
       EvaluationNotebook[]}, $CellContext`CloudFileDialogReturn[] := 
      NotebookClose[$CellContext`dialognb, Interactive -> True, 
        "ClosingEvent" -> Null]]; $CellContext`InitializeConnection[] := 
     Block[{}, $CellContext`showLoadingPage[True]; 
       If[FileType[$CellContext`baseurl$$] === 
         Directory, $CellContext`location$$ = "Local"; CurrentValue[
            EvaluationNotebook[], WindowTitle] = 
          StringJoin[$MachineName, " Files"]; $CellContext`setStatus[
           $CellContext`textResourceString[
           "statusReading"]]; $CellContext`DoSetDirectory[
           $CellContext`FSItem["Local", $CellContext`baseurl$$, Directory], 
           
           Dynamic[$CellContext`directoryitem$$]]; \
$CellContext`setHistory[$CellContext`directoryitem$$], \
$CellContext`location$$ = "Cloud"; $CellContext`setStatus[
           StringJoin[
            $CellContext`textResourceString["statusConnecting"], 
            " (", $CloudBase, ")"]]; If[
           And[
            CurrentValue["AllowDownloads"], 
            CurrentValue["InternetConnectionAvailable"]], If[
             Not[
              CurrentValue["WolframCloudConnected"]], 
             CloudConnect["RememberMe" -> True]]; If[
             CurrentValue[
             "WolframCloudConnected"], $CellContext`DoSetDirectory[
               $CellContext`CloudObjectToFSItem[
                CloudDirectory[]], 
               
               Dynamic[$CellContext`directoryitem$$]]; \
$CellContext`setHistory[$CellContext`directoryitem$$]; Null]]; 
         Null]; $CellContext`setStatus[None]; $CellContext`showLoadingPage[
        False]; Null]; $CellContext`savefilename$$ = (If[
       StringQ[#], #, ".nb"]& )[
      FrontEnd`Private`$SaveToWolframCloudFileName]; \
$CellContext`maincolumnready$$ = True; $CellContext`InitializeConnection[])),
  SynchronousInitialization->False,
  UnsavedVariables:>{$CellContext`loaded$$, $CellContext`maincolumnready$$, \
$CellContext`baseurl$$, $CellContext`location$$}]]]
},
Saveable->False,
CellInsertionPointCell->None,
Evaluator->"System",
NotebookEventActions->{"ReturnKeyDown" :> FE`Evaluate[
    FEPrivate`FindAndClickDefaultButton[]], {"MenuCommand", "EvaluateCells"} :> 
  FE`Evaluate[
    FEPrivate`FindAndClickDefaultButton[]], {
   "MenuCommand", "HandleShiftReturn"} :> FE`Evaluate[
    FEPrivate`FindAndClickDefaultButton[]], {
   "MenuCommand", "EvaluateNextCell"} :> FE`Evaluate[
    FEPrivate`FindAndClickDefaultButton[]], "EscapeKeyDown" :> (FE`Evaluate[
     FEPrivate`FindAndClickCancelButton[]]; \
$CellContext`CloudFileDialogReturn[]), "WindowClose" :> (FE`Evaluate[
     FEPrivate`FindAndClickCancelButton[]]; \
$CellContext`CloudFileDialogReturn[])},
WindowSize->FEPrivate`If[
  FEPrivate`SameQ[
   FrontEnd`CurrentValue[
   FrontEnd`$FrontEnd, {"WolframCloudSettings", "SaveDialogWindowSize"}], {
   Automatic, Automatic}], {500, 600}, 
  FrontEnd`CurrentValue[
  FrontEnd`$FrontEnd, {"WolframCloudSettings", "SaveDialogWindowSize"}]],
WindowMargins->FrontEnd`CurrentValue[
 FrontEnd`$FrontEnd, {"WolframCloudSettings", "SaveDialogWindowMargins"}],
WindowFrame->"ModalDialog",
WindowElements->{"StatusArea"},
WindowFrameElements:>FEPrivate`If[
  FEPrivate`SameQ[FEPrivate`$OperatingSystem, "MacOSX"], {
  "CloseBox", "MinimizeBox", "ResizeArea"}, {"CloseBox", "MinimizeBox"}],
WindowTitle->FEPrivate`FrontEndResource["CloudDialogs", "SaveTitle"],
ScrollingOptions->{"VerticalScrollRange"->Fit},
PrivateNotebookOptions->{"ExcludeFromShutdown"->False},
ShowCellBracket->False,
CellMargins->0,
Deployed->True,
CellContext->Notebook,
AutoItalicWords->{},
PrivateFontOptions->{"OperatorSubstitution"->False},
Magnification->1,
FontColor->GrayLevel[1],
Background->GrayLevel[0.28627450980392155`],
FrontEndVersion->"10.1 for Mac OS X x86 (32-bit, 64-bit Kernel) (March 23, \
2015)",
StyleDefinitions->"Default.nb"
]
(* End of Notebook Content *)

(* Internal cache information *)
(*CellTagsOutline
CellTagsIndex->{}
*)
(*CellTagsIndex
CellTagsIndex->{}
*)
(*NotebookFileOutline
Notebook[{
Cell[598, 21, 79843, 1809, 25, InheritFromParent]
}
]
*)

(* End of internal cache information *)

(* NotebookSignature SK4uHi8MeEA0sK5cZKayIviB *)
