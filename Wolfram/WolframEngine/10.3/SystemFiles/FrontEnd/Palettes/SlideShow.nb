(* Content-type: application/vnd.wolfram.mathematica *)

(*** Wolfram Notebook File ***)
(* http://www.wolfram.com/nb *)

(* CreatedBy='Mathematica 10.0' *)

(*CacheID: 234*)
(* Internal cache information:
NotebookFileLineBreakTest
NotebookFileLineBreakTest
NotebookDataPosition[       158,          7]
NotebookDataLength[     27990,        705]
NotebookOptionsPosition[     27238,        679]
NotebookOutlinePosition[     28032,        705]
CellTagsIndexPosition[     27989,        702]
MenuPosition->1050
WindowTitle->Slide Show
WindowFrame->Palette*)

(* Beginning of Notebook Content *)
Notebook[{
Cell[BoxData[
 TagBox[GridBox[{
    {
     TagBox[
      TooltipBox[
       ButtonBox[
        PaneSelectorBox[{False->
         DynamicBox[FEPrivate`FrontEndResource[
          "FEStrings", "slideshowStartLabel"],
          ImageSizeCache->{109., {1., 10.}}], True->
         DynamicBox[FEPrivate`FrontEndResource[
          "FEStrings", "slideshowEndLabel"],
          ImageSizeCache->{103., {1., 10.}}]}, Dynamic[CurrentValue[
            NotebookTools`NormalInputNotebook[], ScreenStyleEnvironment] === 
          "SlideShow"]],
        Appearance->Automatic,
        ButtonFunction:>FEPrivate`Which[
          FEPrivate`And[
           FEPrivate`MemberQ[{Full, {Full}, {Full, Full}}, 
            FrontEnd`CurrentValue[
             FrontEnd`InputNotebook[], WindowSize]], 
           FEPrivate`SameQ[
            FrontEnd`CurrentValue[
             FrontEnd`InputNotebook[], ScreenStyleEnvironment], "SlideShow"]],
           FEPrivate`NotebookToggleFullScreen[
            FrontEnd`InputNotebook[]]; FEPrivate`Set[
            FrontEnd`CurrentValue[
             FrontEnd`InputNotebook[], ScreenStyleEnvironment], Inherited], 
          FEPrivate`And[
           FEPrivate`Not[
            FEPrivate`MemberQ[{Full, {Full}, {Full, Full}}, 
             FrontEnd`CurrentValue[
              FrontEnd`InputNotebook[], WindowSize]]], 
           FEPrivate`UnsameQ[
            FrontEnd`CurrentValue[
             FrontEnd`InputNotebook[], ScreenStyleEnvironment], "SlideShow"]],
           FEPrivate`Set[
            FrontEnd`CurrentValue[
             FrontEnd`InputNotebook[], ScreenStyleEnvironment], "SlideShow"]; 
          FEPrivate`NotebookToggleFullScreen[
            FrontEnd`InputNotebook[]], 
          FEPrivate`And[
           FEPrivate`MemberQ[{Full, {Full}, {Full, Full}}, 
            FrontEnd`CurrentValue[
             FrontEnd`InputNotebook[], WindowSize]], 
           FEPrivate`UnsameQ[
            FrontEnd`CurrentValue[
             FrontEnd`InputNotebook[], ScreenStyleEnvironment], "SlideShow"]], 
          FEPrivate`Set[
           FrontEnd`CurrentValue[
            FrontEnd`InputNotebook[], ScreenStyleEnvironment], "SlideShow"], 
          FEPrivate`And[
           FEPrivate`Not[
            FEPrivate`MemberQ[{Full, {Full}, {Full, Full}}, 
             FrontEnd`CurrentValue[
              FrontEnd`InputNotebook[], WindowSize]]], 
           FEPrivate`SameQ[
            FrontEnd`CurrentValue[
             FrontEnd`InputNotebook[], ScreenStyleEnvironment], "SlideShow"]], 
          FEPrivate`Set[
           FrontEnd`CurrentValue[
            FrontEnd`InputNotebook[], ScreenStyleEnvironment], Inherited]],
        Enabled->Dynamic[
          And[NotebookTools`NormalInputNotebook[] =!= $Failed, CurrentValue[
             InputNotebook[], {TaggingRules, "NotebookID"}] =!= 
           "WelcomeScreen", AbsoluteCurrentValue[
             InputNotebook[], WindowTitle] =!= "Messages", CurrentValue[
             InputNotebook[], {TaggingRules, "DocsNavigator"}] =!= True, 
           Not[
            StringMatchQ[
             AbsoluteCurrentValue[
              InputNotebook[], WindowTitle], 
             Alternatives["* - Wolfram Mathematica", "Search Results:*"]]]]],
        Evaluator->"System",
        Method->"Preemptive"],
       DynamicBox[
        FEPrivate`FrontEndResource[
        "FEStrings", "slideshowStartLabelTooltip"]]],
      Annotation[#, 
       Dynamic[
        RawBoxes[
         FEPrivate`FrontEndResource[
         "FEStrings", "slideshowStartLabelTooltip"]]], "Tooltip"]& ]},
    {
     StyleBox[
      DynamicBox[FEPrivate`FrontEndResource["FEStrings", "slideshowNewLabel"],
       
       ImageSizeCache->{34., {1., 8.}}],
      StripOnInput->False,
      FontWeight->Bold]},
    {
     TagBox[
      TooltipBox[
       ButtonBox[
        DynamicBox[FEPrivate`FrontEndResource[
         "FEStrings", "slideshowTemplateLabel"],
         ImageSizeCache->{108., {1., 10.}}],
        Appearance->Automatic,
        ButtonFunction:>FrontEndExecute[{
           FrontEnd`NotebookOpen[
            FrontEnd`FindFileOnPath["SlideShowChooser.nb", "PalettePath"]]}],
        Evaluator->None,
        Method->"Preemptive"],
       DynamicBox[
        FEPrivate`FrontEndResource["FEStrings", "slideshowTemplateTooltip"]]],
      
      Annotation[#, 
       Dynamic[
        RawBoxes[
         FEPrivate`FrontEndResource[
         "FEStrings", "slideshowTemplateTooltip"]]], "Tooltip"]& ]},
    {
     TagBox[
      TooltipBox[
       ButtonBox[
        DynamicBox[FEPrivate`FrontEndResource[
         "FEStrings", "slideshowConvertLabel"],
         ImageSizeCache->{214., {1., 11.}}],
        Appearance->Automatic,
        ButtonFunction:>With[{$CellContext`nb$ = NotebookGet[
             InputNotebook[]]}, 
          CreatePalette[
           ExpressionCell[
            
            DynamicModule[{$CellContext`x = {}, $CellContext`i = 
              1, $CellContext`list}, 
             Column[{
               Dynamic[
                RawBoxes[
                 FEPrivate`FrontEndResource[
                 "FEStrings", "slideshowConvertStylesLabel"]]], Null, 
               Grid[{{
                  Framed[
                   Pane[
                    Grid[
                    MapIndexed[{
                    EventHandler[
                    Pane[
                    Row[{
                    Function[{$CellContext`y}, 
                    Checkbox[
                    Dynamic[
                    MemberQ[$CellContext`x, $CellContext`y], 
                    BoxForm`TogglerBarFunction[$CellContext`x, \
$CellContext`y]& ], ImageMargins -> {{5, 5}, {0, 0}}]][#], #}, StripOnInput -> 
                    True], ImageSize -> {Full, Automatic}], 
                    "MouseClicked" :> ($CellContext`i = First[#2]), 
                    PassEventsDown -> True]}& , $CellContext`list = Flatten[
                    Through[
                    {Complement, Intersection}[
                    Union[
                    Cases[
                    First[$CellContext`nb$], Cell[
                    Blank[], 
                    Pattern[$CellContext`x, 
                    Blank[]], 
                    BlankNullSequence[]] :> $CellContext`x, Infinity]], {
                    "Text", "Code", "Input", "InputOnly", "Output"}]]]], 
                    ItemSize -> Fit, 
                    Background -> {
                    None, {{{None, LightGray}}, Dynamic[$CellContext`i] -> 
                    LightBlue}}], {200, 200}, Scrollbars -> {False, True}], 
                   FrameMargins -> 0, FrameStyle -> Gray, ImageMargins -> 0], 
                  Null, 
                  Column[{
                    Dynamic[
                    FEPrivate`FrontEndResource[
                    "FEStrings", "customStylesPreviewLabel"]], 
                    Framed[
                    (Pane[
                    Dynamic[
                    Rasterize[
                    Notebook[{
                    Cell["", "SlideShowNavigationBar"], 
                    Cell[
                    Part[$CellContext`list, $CellContext`i], 
                    Part[$CellContext`list, $CellContext`i], PageWidth -> 
                    Infinity], 
                    Cell[""]}, WindowSize -> 300, #]]], {Automatic, 150}]& )[
                    Options[$CellContext`nb$, StyleDefinitions]], Background -> 
                    White, FrameMargins -> 10, FrameStyle -> Gray, 
                    ImageMargins -> 0, RoundingRadius -> 10]}]}}, Alignment -> 
                Top], 
               Item[
                ChoiceButtons[{
                  Dynamic[
                   RawBoxes[
                    FEPrivate`FrontEndResource[
                    "FEStrings", "slideshowInsertLabel"]]], 
                  Dynamic[
                   RawBoxes[
                    FEPrivate`FrontEndResourceString["cancelButtonText"]]]}, {
                 NotebookPut[
                    ReplaceAll[$CellContext`nb$, 
                    (Pattern[$CellContext`c, 
                    Cell[
                    Blank[], #, 
                    BlankNullSequence[]]] :> Sequence[#2, $CellContext`c]& )[
                    Apply[Alternatives, $CellContext`x], 
                    FrontEndResource[
                    "FEExpressions", "SlideshowNavigationCell"]]]]; 
                  NotebookClose[
                    ButtonNotebook[]], 
                  NotebookClose[
                   ButtonNotebook[]]}, {{
                  Method -> "Queued", Enabled -> 
                   Dynamic[$CellContext`x =!= {}]}, {
                  Method -> "Preemptive"}}], Alignment -> Right]}]], 
            CellMargins -> 8], CellContext -> Notebook, DynamicUpdating -> 
           True, WindowTitle -> 
           FEPrivate`FrontEndResource["FEStrings", "slideshowConvertTitle"]]],
        
        Enabled->Dynamic[CurrentValue[
            InputNotebook[], {"CellCount", False}] > 0],
        Evaluator->"System",
        Method->"Queued"],
       DynamicBox[
        FEPrivate`FrontEndResource["FEStrings", "slideshowConvertTooltip"]]],
      Annotation[#, 
       Dynamic[
        RawBoxes[
         FEPrivate`FrontEndResource["FEStrings", "slideshowConvertTooltip"]]],
        "Tooltip"]& ]},
    {
     TagBox[
      TooltipBox[
       ButtonBox[
        DynamicBox[FEPrivate`FrontEndResource[
         "FEStrings", "slideshowTOCLabel"],
         ImageSizeCache->{107., {1., 11.}}],
        Appearance->Automatic,
        ButtonFunction:>CreatePalette[
          Flatten[
           Map[Cell[
             BoxData[#], "SlideTOC", CellMargins -> 3, 
             ButtonBoxOptions -> {
              Evaluator -> "System", 
               ButtonFunction :> ((Apply[FrontEndExecute[{
                    FrontEnd`SelectionMove[
                    FrontEnd`InputNotebook[], Before, Notebook, AutoScroll -> 
                    False], 
                    SlotSequence[1], 
                    FrontEnd`SelectionMove[
                    FrontEnd`InputNotebook[], After, Cell, AutoScroll -> 
                    False], 
                    FrontEnd`NotebookWrite[
                    FrontEnd`InputNotebook[], 
                    Cell["", Deletable -> True, ShowCellBracket -> False], 
                    All], 
                    FrontEnd`NotebookDelete[
                    FrontEnd`InputNotebook[]]}]& , 
                  Flatten[
                   MapThread[Table[
                    FrontEnd`NotebookFind[
                    FrontEnd`InputNotebook[], #, Next, CellStyle, AutoScroll -> 
                    False], {#2}]& , {
                    Take[{"SlideShowNavigationBar", "Section"}, 
                    Length[#2]], #2}]]]; SelectionMove[
                  InputNotebook[], Previous, 
                  If[Length[#2] == 1, Cell, CellContents]])& )}]& , 
            MapIndexed[If[Length[#2] == 1, 
              RowBox[
               Riffle[{
                 ButtonBox[
                  RowBox[{
                    DynamicBox[
                    FEPrivate`FrontEndResource[
                    "FEStrings", "SlideshowSlideText"]], " ", 
                    Apply[ToString, #2]}], ButtonData -> #2, Appearance -> 
                  None, Evaluator -> "System"], 
                 Apply[Sequence, #]}, "\n\t"]], 
              
              ButtonBox[#, ButtonData -> #2, Appearance -> None, Evaluator -> 
               "System"]]& , 
             ReplaceAll[
              Split[
               Cases[
                First[
                 NotebookGet[
                  InputNotebook[]]], 
                Cell[
                 Blank[], 
                 Alternatives["SlideShowNavigationBar", "Section"], 
                 BlankNullSequence[]], Infinity], Not[
                MatchQ[#2, 
                 Cell[
                  Blank[], "SlideShowNavigationBar", 
                  BlankNullSequence[]]]]& ], {Cell[
                 TextData[
                  Pattern[$CellContext`c, 
                   Blank[]]], "Section", 
                 BlankNullSequence[]] :> RowBox[
                 If[
                  ListQ[$CellContext`c], $CellContext`c, {$CellContext`c}]], 
               Cell[
                 Pattern[$CellContext`c, 
                  Blank[]], "Section", 
                 BlankNullSequence[]] :> $CellContext`c, Blank[Cell] :> 
               Sequence[]}], {1, 2}]]], DockedCells -> {
            Cell[
             BoxData[
              GridBox[{{
                 ButtonBox[
                  StyleBox["\[FirstPage]", "SR"], 
                  ButtonFunction :> (FrontEndExecute[{
                    FrontEndToken[
                    FrontEnd`InputNotebook[], "ScrollPageFirst"]}]& ), 
                  BaseStyle -> "SlideHyperlink", Evaluator -> "System"], 
                 ButtonBox[
                  StyleBox["\[LeftPointer]", "SR"], 
                  ButtonFunction :> (FrontEndExecute[{
                    FrontEndToken[
                    FrontEnd`InputNotebook[], "ScrollPagePrevious"]}]& ), 
                  BaseStyle -> "SlideHyperlink", Evaluator -> "System"], 
                 ButtonBox[
                  StyleBox["\[RightPointer]", "SR"], 
                  ButtonFunction :> (FrontEndExecute[{
                    FrontEndToken[
                    FrontEnd`InputNotebook[], "ScrollPageNext"]}]& ), 
                  BaseStyle -> "SlideHyperlink", Evaluator -> "System"], 
                 ButtonBox[
                  StyleBox["\[LastPage]", "SR"], 
                  ButtonFunction :> (FrontEndExecute[{
                    FrontEndToken[
                    FrontEnd`InputNotebook[], "ScrollPageLast"]}]& ), 
                  BaseStyle -> "SlideHyperlink", Evaluator -> "System"]}}, 
               ColumnSpacings -> 0, ColumnWidths -> 2.95]], "Text", 
             CellMargins -> 0]}, 
          ScrollingOptions -> {"PagewiseScrolling" -> False}, 
          WindowElements -> {"VerticalScrollBar"}, 
          WindowFrameElements -> {"CloseBox", "ResizeArea"}, WindowTitle -> 
          Dynamic[
            FEPrivate`FrontEndResource[
            "FEStrings", "slideshowTOCContentsLabel"]], 
          WindowSize -> {250, All}, CellContext -> Notebook, DynamicUpdating -> 
          True, WindowMargins -> {{Automatic, 265}, {Automatic, 2}}, 
          Background -> GrayLevel[0.85098]],
        Evaluator->Automatic,
        Method->"Preemptive"],
       DynamicBox[
        FEPrivate`FrontEndResource["FEStrings", "slideshowTOCTooltip"]]],
      Annotation[#, 
       Dynamic[
        RawBoxes[
         FEPrivate`FrontEndResource["FEStrings", "slideshowTOCTooltip"]]], 
       "Tooltip"]& ]},
    {
     StyleBox[
      DynamicBox[FEPrivate`FrontEndResource[
       "FEStrings", "slideshowInsertLabel"],
       ImageSizeCache->{30., {0., 8.}}],
      StripOnInput->False,
      FontWeight->Bold]},
    {
     TagBox[
      TooltipBox[
       ButtonBox[
        DynamicBox[FEPrivate`FrontEndResource[
         "FEStrings", "slideshowSlideLabel"],
         ImageSizeCache->{119., {3., 10.}}],
        Appearance->Automatic,
        ButtonFunction:>FrontEndExecute[{
           FrontEnd`NotebookWrite[
            FrontEnd`InputNotebook[], 
            FEPrivate`FrontEndResource["FEExpressions", "SlideshowNewSlide"], 
            After]}],
        Evaluator->None,
        Method->"Preemptive"],
       DynamicBox[
        FEPrivate`FrontEndResource["FEStrings", "slideshowSlideTooltip"]]],
      Annotation[#, 
       Dynamic[
        RawBoxes[
         FEPrivate`FrontEndResource["FEStrings", "slideshowSlideTooltip"]]], 
       "Tooltip"]& ]},
    {
     TagBox[
      TooltipBox[
       ButtonBox[
        DynamicBox[FEPrivate`FrontEndResource[
         "FEStrings", "slideshowBreakLabel"],
         ImageSizeCache->{66., {1., 10.}}],
        Appearance->Automatic,
        ButtonFunction:>FrontEndExecute[{
           FrontEnd`NotebookWrite[
            FrontEnd`InputNotebook[], 
            FEPrivate`FrontEndResource[
            "FEExpressions", "SlideshowNavigationCell"]]}],
        Evaluator->None,
        Method->"Preemptive"],
       DynamicBox[
        FEPrivate`FrontEndResource["FEStrings", "slideshowBreakTooltip"]]],
      Annotation[#, 
       Dynamic[
        RawBoxes[
         FEPrivate`FrontEndResource["FEStrings", "slideshowBreakTooltip"]]], 
       "Tooltip"]& ]},
    {
     StyleBox[
      DynamicBox[FEPrivate`FrontEndResource[
       "FEStrings", "slideshowSettingsLabel"],
       ImageSizeCache->{42., {2., 8.}}],
      StripOnInput->False,
      FontWeight->Bold]},
    {
     TagBox[GridBox[{
        {
         DynamicModuleBox[{$CellContext`lis$$ = {}}, 
          TagBox[
           DynamicBox[ToBoxes[
             PopupMenu[
              Dynamic[
               CurrentValue[
                InputNotebook[], ScreenStyleEnvironment]], $CellContext`lis$$,
               None, 
              ActionMenu[
               PaneSelector[{
                 Dynamic[
                  RawBoxes[
                   FEPrivate`FrontEndResource[
                   "FEStrings", "slideshowEnvLabel"]]], 
                 Dynamic[
                  RawBoxes[
                   FEPrivate`FrontEndResource[
                   "FEStrings", "slideshowSizeLabel"]]], 
                 Dynamic[
                  RawBoxes[
                   FEPrivate`FrontEndResource[
                   "FEStrings", "slideshowMagLabel"]]], 
                 Dynamic[
                  RawBoxes[
                   FEPrivate`FrontEndResource[
                   "FEStrings", "slideshowTransLabel"]]]}, 1], {}, Evaluator -> 
               "System"]], StandardForm],
            Evaluator->"System",
            ImageSizeCache->{134., {8., 19.}}],
           EventHandlerTag[{"MouseDown" :> ($CellContext`lis$$ = Rest[
                FE`Evaluate[
                 FEPrivate`GetPopupList["MenuListScreenStyleEnvironments"]]]),
              PassEventsDown -> True, PassEventsDown -> Automatic, 
             PassEventsUp -> True}]],
          DynamicModuleValues:>{}]},
        {
         PopupMenuBox[Dynamic[
           CurrentValue[
            InputNotebook[], WindowSize], Evaluator -> "System"], {Full->
          
          DynamicBox[FEPrivate`FrontEndResource[
           "FEStrings", "slideshowFullScreenLabel"],
           ImageSizeCache->{67., {1., 10.}}], {800, 
          600}->"\<\"800 x 600\"\>", {1024, 768}->"\<\"1024 x 768\"\>", {1280,
           960}->"\<\"1280 x 960\"\>"}, "None", 
          ActionMenuBox[
           PaneSelectorBox[{1->
            
            DynamicBox[FEPrivate`FrontEndResource[
             "FEStrings", "slideshowEnvLabel"],
             ImageSizeCache->{110., {1., 10.}}], 2->
            
            DynamicBox[FEPrivate`FrontEndResource[
             "FEStrings", "slideshowSizeLabel"],
             ImageSizeCache->{105., {1., 10.}}], 3->
            
            DynamicBox[FEPrivate`FrontEndResource[
             "FEStrings", "slideshowMagLabel"],
             ImageSizeCache->{85., {3., 11.}}], 4->
            
            DynamicBox[FEPrivate`FrontEndResource[
             "FEStrings", "slideshowTransLabel"],
             ImageSizeCache->{100., {1., 11.}}]}, 2], {},
           Evaluator->"System"]]},
        {
         PopupMenuBox[Dynamic[
           CurrentValue[
            InputNotebook[], Magnification], Evaluator -> "System"], {
          0.75->"\<\"75%\"\>", 1->"\<\"100%\"\>", 1.25->"\<\"125%\"\>", 
          1.5->"\<\"150%\"\>"}, "None", 
          ActionMenuBox[
           PaneSelectorBox[{1->
            
            DynamicBox[FEPrivate`FrontEndResource[
             "FEStrings", "slideshowEnvLabel"],
             ImageSizeCache->{110., {1., 10.}}], 2->
            
            DynamicBox[FEPrivate`FrontEndResource[
             "FEStrings", "slideshowSizeLabel"],
             ImageSizeCache->{105., {1., 10.}}], 3->
            
            DynamicBox[FEPrivate`FrontEndResource[
             "FEStrings", "slideshowMagLabel"],
             ImageSizeCache->{85., {3., 11.}}], 4->
            
            DynamicBox[FEPrivate`FrontEndResource[
             "FEStrings", "slideshowTransLabel"],
             ImageSizeCache->{100., {1., 11.}}]}, 3], {},
           Evaluator->"System"]]},
        {
         PopupMenuBox[Dynamic[
           CurrentValue[
            InputNotebook[], TransitionEffect], Evaluator -> "System"], {
          Automatic->
          
          DynamicBox[FEPrivate`FrontEndResource[
           "FEStrings", "slideshowTransNoneLabel"],
           ImageSizeCache->{33., {1., 10.}}], "CrossFade"->
          DynamicBox[FEPrivate`FrontEndResource[
           "FEStrings", "slideshowTransCrossLabel"],
           ImageSizeCache->{62., {1., 11.}}]}, "None", 
          ActionMenuBox[
           PaneSelectorBox[{1->
            
            DynamicBox[FEPrivate`FrontEndResource[
             "FEStrings", "slideshowEnvLabel"],
             ImageSizeCache->{110., {1., 10.}}], 2->
            
            DynamicBox[FEPrivate`FrontEndResource[
             "FEStrings", "slideshowSizeLabel"],
             ImageSizeCache->{105., {1., 10.}}], 3->
            
            DynamicBox[FEPrivate`FrontEndResource[
             "FEStrings", "slideshowMagLabel"],
             ImageSizeCache->{85., {3., 11.}}], 4->
            
            DynamicBox[FEPrivate`FrontEndResource[
             "FEStrings", "slideshowTransLabel"],
             ImageSizeCache->{100., {1., 11.}}]}, 4], {},
           Evaluator->"System"]]}
       },
       DefaultBaseStyle->"Column",
       GridBoxAlignment->{"Columns" -> {{Left}}},
       GridBoxItemSize->{"Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}],
      "Column"]},
    {
     TagBox[GridBox[{
        {
         StyleBox[
          
          DynamicBox[FEPrivate`FrontEndResource[
           "FEStrings", "slideshowWinElemLabel"],
           ImageSizeCache->{90., {0., 8.}}],
          StripOnInput->False,
          FontWeight->Bold], "\[SpanFromLeft]", "\[SpanFromLeft]"},
        {"", 
         CheckboxBox[Dynamic[
           FEPrivate`UnsameQ[
            CurrentValue[
             InputNotebook[], {TaggingRules, "SlideshowSettings", "Toolbar"}],
             False], (CurrentValue[
             InputNotebook[], {
             TaggingRules, "SlideshowSettings", "Toolbar"}] = #)& ]], 
         DynamicBox[FEPrivate`FrontEndResource[
          "FEStrings", "slideShowNavBarLabel"],
          ImageSizeCache->{91., {2., 8.}}]},
        {"", 
         CheckboxBox[Dynamic[
           (FEPrivate`If[
            FEPrivate`UnsameQ[
             FEPrivate`Head[#], List], True, 
            FEPrivate`MemberQ[#, "VerticalScrollBar"]]& )[
            CurrentValue[
             InputNotebook[], {
             TaggingRules, "SlideshowSettings", "WindowElements"}]], 
           BoxForm`TogglerBarFunction[
            CurrentValue[
             InputNotebook[], {
             TaggingRules, "SlideshowSettings", "WindowElements"}, {
             "HorizontalScrollBar", "MagnificationPopUp", "StatusArea", 
              "VerticalScrollBar"}], "VerticalScrollBar"]& ]], 
         DynamicBox[FEPrivate`FrontEndResource[
          "FEStrings", "slideShowVerticalScrollBarLabel"],
          ImageSizeCache->{80., {1., 8.}}]},
        {"", 
         CheckboxBox[Dynamic[
           (FEPrivate`If[
            FEPrivate`UnsameQ[
             FEPrivate`Head[#], List], True, 
            FEPrivate`MemberQ[#, "HorizontalScrollBar"]]& )[
            CurrentValue[
             InputNotebook[], {
             TaggingRules, "SlideshowSettings", "WindowElements"}]], 
           BoxForm`TogglerBarFunction[
            CurrentValue[
             InputNotebook[], {
             TaggingRules, "SlideshowSettings", "WindowElements"}, {
             "HorizontalScrollBar", "MagnificationPopUp", "StatusArea", 
              "VerticalScrollBar"}], "HorizontalScrollBar"]& ]], 
         DynamicBox[FEPrivate`FrontEndResource[
          "FEStrings", "slideShowHorizontalScrollBarLabel"],
          ImageSizeCache->{95., {1., 8.}}]},
        {"", 
         CheckboxBox[Dynamic[
           (FEPrivate`If[
            FEPrivate`UnsameQ[
             FEPrivate`Head[#], List], True, 
            FEPrivate`MemberQ[#, "MagnificationPopUp"]]& )[
            CurrentValue[
             InputNotebook[], {
             TaggingRules, "SlideshowSettings", "WindowElements"}]], 
           BoxForm`TogglerBarFunction[
            CurrentValue[
             InputNotebook[], {
             TaggingRules, "SlideshowSettings", "WindowElements"}, {
             "HorizontalScrollBar", "MagnificationPopUp", "StatusArea", 
              "VerticalScrollBar"}], "MagnificationPopUp"]& ]], 
         DynamicBox[FEPrivate`FrontEndResource[
          "FEStrings", "slideShowMagnificationPopUpLabel"],
          ImageSizeCache->{98., {2., 8.}}]},
        {"", 
         CheckboxBox[Dynamic[
           (FEPrivate`If[
            FEPrivate`UnsameQ[
             FEPrivate`Head[#], List], True, 
            FEPrivate`MemberQ[#, "StatusArea"]]& )[
            CurrentValue[
             InputNotebook[], {
             TaggingRules, "SlideshowSettings", "WindowElements"}]], 
           BoxForm`TogglerBarFunction[
            CurrentValue[
             InputNotebook[], {
             TaggingRules, "SlideshowSettings", "WindowElements"}, {
             "HorizontalScrollBar", "MagnificationPopUp", "StatusArea", 
              "VerticalScrollBar"}], "StatusArea"]& ]], 
         DynamicBox[FEPrivate`FrontEndResource[
          "FEStrings", "slideShowStatusAreaLabel"],
          ImageSizeCache->{53., {1., 8.}}]}
       },
       AutoDelete->False,
       GridBoxAlignment->{"Columns" -> {{Left}}},
       GridBoxItemSize->{"Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}},
       
       GridBoxSpacings->{
        "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}, 
         "RowsIndexed" -> {2 -> 1}}],
      "Grid"]}
   },
   DefaultBaseStyle->"Column",
   GridBoxAlignment->{"Columns" -> {{Left}}},
   GridBoxDividers->{
    "Columns" -> {{None}}, "RowsIndexed" -> {2 -> GrayLevel[0.5]}},
   GridBoxItemSize->{"Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}},
   GridBoxSpacings->{
    "Columns" -> {{Automatic}}, 
     "RowsIndexed" -> {6 -> 2, 9 -> 2, 11 -> 2, 2 -> 3}}],
  "Column"]],
 CellMargins->8,
 CellBracketOptions->{"Color"->RGBColor[0.269993, 0.308507, 0.6]},
 CellHorizontalScrolling->True,
 PageBreakAbove->True,
 PageBreakWithin->False,
 ShowAutoStyles->True,
 LineSpacing->{1.25, 0},
 AutoItalicWords->{},
 ScriptMinSize->9,
 ShowStringCharacters->False,
 FontFamily:>CurrentValue["PanelFontFamily"],
 FontSize:>CurrentValue["PanelFontSize"]]
},
WindowSize->{All, All},
WindowMargins->{{Automatic, 20}, {Automatic, 120}},
WindowElements->{"StatusArea", "VerticalScrollBar", "MagnificationPopUp"},
WindowTitle->Dynamic[
  FEPrivate`FrontEndResource["FEStrings", "slideshowTitle"]],
ScrollingOptions->{"VerticalScrollRange"->Fit},
CellContext->Notebook,
DynamicUpdating->True,
MenuSortingValue->1050,
PaneSelectorBoxOptions->{ImageMargins->{{0, 5}, {0, 0}}},
TooltipBoxOptions->{TooltipDelay->Automatic},
FrontEndVersion->"10.0 for Mac OS X x86 (32-bit, 64-bit Kernel) (June 16, \
2014)",
StyleDefinitions->"SystemPalette.nb",
ScrollingOptions -> {"PagewiseScrolling" -> False}
]
(* End of Notebook Content *)

(* Internal cache information *)
(*CellTagsOutline
CellTagsIndex->{}
*)
(*CellTagsIndex
CellTagsIndex->{}
*)
(*NotebookFileOutline
Notebook[{
Cell[602, 22, 26632, 655, 576, InheritFromParent,
 PageBreakAbove->True,
 PageBreakWithin->False]
}
]
*)

(* End of internal cache information *)

